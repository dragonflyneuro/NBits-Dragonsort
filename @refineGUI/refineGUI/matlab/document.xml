<?xml version="1.0" encoding="UTF-8" standalone="no" ?><w:document xmlns:w="http://schemas.openxmlformats.org/wordprocessingml/2006/main"><w:body><w:p><w:pPr><w:pStyle w:val="code"/></w:pPr><w:r><w:t><![CDATA[classdef refineGUI < matlab.apps.AppBase

    % Properties that correspond to app components
    properties (Access = public)
        SortingrefinerUIFigure  matlab.ui.Figure
        GridLayout              matlab.ui.container.GridLayout
        TabGroup                matlab.ui.container.TabGroup
        ScalingsTab             matlab.ui.container.Tab
        GridLayout3             matlab.ui.container.GridLayout
        ScalingTable            matlab.ui.control.Table
        TagsTab                 matlab.ui.container.Tab
        GridLayout6             matlab.ui.container.GridLayout
        TagTable                matlab.ui.control.Table
        GridLayout2             matlab.ui.container.GridLayout
        ShowtraceButton         matlab.ui.control.StateButton
        AutoButton              matlab.ui.control.StateButton
        ToggleGainLossbytagsDropDownLabel  matlab.ui.control.Label
        TagsDropDown            matlab.ui.control.DropDown
        histBinEditField        matlab.ui.control.NumericEditField
        HistogramxlimLabel      matlab.ui.control.Label
        GainTagButton           matlab.ui.control.Button
        LossTagButton           matlab.ui.control.Button
        ResetrefineButton       matlab.ui.control.Button
        LockoriginalButton      matlab.ui.control.StateButton
        GraphicalrefineButton   matlab.ui.control.Button
        DoneButton              matlab.ui.control.Button
    end

    
    properties (Access = public)
        CallingApp
        d = [];
        p
        w
        wTimes
        batchIdx
        maxUnits = 12;
        thr
    end
    
    methods (Access = private)
        
        function [] = getDevMatrix(app)
            if app.LockoriginalButton.Value == 0
                app.w = app.p.rawSpikeWaves;
                app.wTimes = app.p.rawSpikeWavesTimes;
            else
                [~, ~, app.batchIdx] = app.p.unitArray.getOrphanSpikes(app.p.t.rawSpikeSample,getBatchRange(app.CallingApp));
                app.w = app.p.rawSpikeWaves(app.batchIdx, :, :);
                app.wTimes = app.p.rawSpikeWavesTimes(app.batchIdx);
            end
            r = getBatchRange(app.CallingApp, app.p.currentBatch+app.p.templateBatches);
            [app.d.devMatrix, app.d.tempWavesSet, app.d.spikeAssignmentUnit] = newDeviationRefine(app.thr, ...
                app.p.unitArray, app.w, r, app.p.numTemplates, app.p.m.sRateHz, app.ScalingTable.Data.Scaling,...
                app.p.t.templateCropFactor,app.p.t.deviationSampleWeights);
            app.d.prevAssignment = app.d.spikeAssignmentUnit;
        end
    end
    

    % Callbacks that handle component events
    methods (Access = private)

        % Code that executes after component creation
        function startupFcn(app, mainapp, input)
            app.CallingApp = mainapp;
            app.p = input;
            app.thr = app.p.t.add2UnitThr(1);
            
            temp = [app.p.unitArray.refineSettings]';
            col = unique([app.p.unitArray.tags, "Junk"]);
            allBool = [];
            for ii = 1:length(col)
                bool = app.p.unitArray.tagcmpi(col(ii));
                allBool = cat(1,allBool,bool);
            end
            app.p.tags = array2table(logical(allBool'));
            app.p.tags.Properties.VariableNames = col;
            app.p.tags.Properties.RowNames = "u"+string(1:length(app.p.unitArray));
            unitNames = app.p.tags.Properties.RowNames;
            
            Scaling = temp;
            GainLock = true(size(temp));
            LossLock = true(size(temp));
            ShowLock = true(size(temp));
            if length(temp) > app.maxUnits
                ShowLock(app.maxUnits+1:end) = false;
            end
            app.ScalingTable.Data = table(Scaling,GainLock,LossLock,ShowLock);
            app.ScalingTable.RowName = unitNames;
            app.ScalingTable.ColumnEditable = true;
            
            app.TagTable.Data = app.p.tags;
            app.TagTable.RowName = app.p.tags.Properties.RowNames;
            app.TagTable.ColumnName = app.p.tags.Properties.VariableNames;
            app.TagTable.ColumnEditable = false(1,size(app.p.tags,2));
            
            app.TagsDropDown.Items = [app.TagsDropDown.Items; app.TagTable.ColumnName];
            
            app.getDevMatrix();
            
        end

        % Button pushed function: GraphicalrefineButton
        function GraphicalrefineButtonPushed(app, event)
            
            close all
            [e, newass] = graphicScaling(app);
            
            if e == 1
                app.d.prevAssignment = app.d.spikeAssignmentUnit;
                app.d.spikeAssignmentUnit = newass{2};
                app.ScalingTable.Data.Scaling = newass{1};
                app.DoneButton.Enable = 'on';
            end
            
        end

        % Callback function: LockoriginalButton, ResetrefineButton
        function ResetrefineButtonPushed(app, event)
            app.getDevMatrix();
            app.ScalingTable.Data.Scaling = [app.p.unitArray.refineSettings]';
            
        end

        % Button pushed function: LossTagButton
        function LossTagButtonPushed(app, event)
            tag = app.TagsDropDown.Value;
            if strcmpi(tag,"all")
                prop = sum(app.ScalingTable.Data.LossLock)/length(app.ScalingTable.Data.LossLock);
                if prop > 0.5
                    app.ScalingTable.Data.LossLock = false(size(app.ScalingTable.Data.LossLock));
                else
                    app.ScalingTable.Data.LossLock = true(size(app.ScalingTable.Data.LossLock));
                end
            else
                tagCol = strcmpi(tag,app.TagTable.ColumnName);
                taggedUnits = table2array(app.TagTable.Data(:,tagCol));
                prop = sum(app.ScalingTable.Data.LossLock(taggedUnits))/sum(taggedUnits);
                if prop > 0.5
                    app.ScalingTable.Data.LossLock(taggedUnits) = false;
                else
                    app.ScalingTable.Data.LossLock(taggedUnits) = true;
                end
            end
            
        end

        % Button pushed function: GainTagButton
        function GainTagButtonPushed(app, event)
            tag = app.TagsDropDown.Value;
            if strcmpi(tag,"all")
                prop = sum(app.ScalingTable.Data.GainLock)/length(app.ScalingTable.Data.GainLock);
                if prop > 0.5
                    app.ScalingTable.Data.GainLock = false(size(app.ScalingTable.Data.GainLock));
                else
                    app.ScalingTable.Data.GainLock = true(size(app.ScalingTable.Data.GainLock));
                end
            else
                tagCol = strcmpi(tag,app.TagTable.ColumnName);
                taggedUnits = table2array(app.TagTable.Data(:,tagCol));
                prop = sum(app.ScalingTable.Data.GainLock(taggedUnits))/sum(taggedUnits);
                if prop > 0.5
                    app.ScalingTable.Data.GainLock(taggedUnits) = false;
                else
                    app.ScalingTable.Data.GainLock(taggedUnits) = true;
                end
            end
            
        end

        % Button pushed function: DoneButton
        function DoneButtonPushed(app, event)
            if ~isempty(app.d)
                app.d.scaleArray = app.ScalingTable.Data.Scaling';
                updateUnits(app.CallingApp, app.d, app.LockoriginalButton.Value);
            end
            switchButtons(app.CallingApp,1);
            switchButtons(app.CallingApp,3);
            close all
            delete(app)
            
        end

        % Close request function: SortingrefinerUIFigure
        function SortingrefinerUIFigureCloseRequest(app, event)
            switchButtons(app.CallingApp,1);
            switchButtons(app.CallingApp,3);
            close all
            delete(app)
            
        end

        % Callback function
        function xlim1EditFieldValueChanged(app, event)
            value = [app.xlim1EditField.Value app.xlim2EditField.Value];
            value = sort(value);
            app.xlim1EditField.Value = value(1);
            app.xlim2EditField.Value = value(2);
            
        end

        % Value changed function: AutoButton
        function AutoButtonValueChanged(app, event)
            value = app.AutoButton.Value;
            if value
                app.histBinEditField.Editable = 'off';
            else
                app.histBinEditField.Editable = 'on';
            end
            
        end

        % Cell edit callback: ScalingTable
        function ScalingTableCellEdit(app, event)
            indices = event.Indices;
            
            if indices(2) == 4
                numOn = sum(app.ScalingTable.Data.ShowLock);
                if numOn > app.maxUnits
                    current = find(app.ScalingTable.Data.ShowLock);
                    if indices(1) > current(1)
                        app.ScalingTable.Data.ShowLock(current(1:numOn-app.maxUnits)) = false;
                    else
                        app.ScalingTable.Data.ShowLock(current(app.maxUnits+1:end)) = false;
                    end
                end
            elseif indices(2) == 1
                lAllowed = app.ScalingTable.Data.LossLock;
                lAllowed(indices(1)) = true;
                gAllowed = app.ScalingTable.Data.GainLock;
                gAllowed(indices(1)) = true;
                app.d.prevAssignment = app.d.spikeAssignmentUnit;
                devM = app.d.devMatrix;
                
                for ii = 1:size(devM,1)
                    if ~any(app.d.spikeAssignmentUnit(ii,:)) || lAllowed(app.d.spikeAssignmentUnit(ii,:))
                        app.d.spikeAssignmentUnit(ii,:) = false;
                        [~, idx] = sort(devM(ii,:));
                        for jj = idx
                            if devM(ii,jj) < app.ScalingTable.Data.Scaling(jj)*app.thr^2 && gAllowed(jj)
                                app.d.spikeAssignmentUnit(ii,jj) = true;
                                break;
                            end
                        end
                    end
                end
            end
            
        end
    end

    % Component initialization
    methods (Access = private)

        % Create UIFigure and components
        function createComponents(app)

            % Create SortingrefinerUIFigure and hide until all components are created
            app.SortingrefinerUIFigure = uifigure('Visible', 'off');
            app.SortingrefinerUIFigure.Position = [100 100 412 450];
            app.SortingrefinerUIFigure.Name = 'Sorting refiner';
            app.SortingrefinerUIFigure.CloseRequestFcn = createCallbackFcn(app, @SortingrefinerUIFigureCloseRequest, true);

            % Create GridLayout
            app.GridLayout = uigridlayout(app.SortingrefinerUIFigure);
            app.GridLayout.ColumnWidth = {160, '1x'};
            app.GridLayout.RowHeight = {'1x'};
            app.GridLayout.ColumnSpacing = 5;
            app.GridLayout.RowSpacing = 5;
            app.GridLayout.Padding = [5 5 5 5];

            % Create GridLayout2
            app.GridLayout2 = uigridlayout(app.GridLayout);
            app.GridLayout2.ColumnWidth = {'5x', '5x', '5x', '5x', '5x', '5x'};
            app.GridLayout2.RowHeight = {'1x', '1x', '1x', '1x', '1x', '1x', '1x', '1x', '1x', '1x', '1x', '1x', '1x', '1x', '1x'};
            app.GridLayout2.ColumnSpacing = 0;
            app.GridLayout2.RowSpacing = 3;
            app.GridLayout2.Padding = [5 5 5 5];
            app.GridLayout2.Layout.Row = 1;
            app.GridLayout2.Layout.Column = 1;

            % Create DoneButton
            app.DoneButton = uibutton(app.GridLayout2, 'push');
            app.DoneButton.ButtonPushedFcn = createCallbackFcn(app, @DoneButtonPushed, true);
            app.DoneButton.Enable = 'off';
            app.DoneButton.Layout.Row = 15;
            app.DoneButton.Layout.Column = [1 6];
            app.DoneButton.Text = 'Done';

            % Create GraphicalrefineButton
            app.GraphicalrefineButton = uibutton(app.GridLayout2, 'push');
            app.GraphicalrefineButton.ButtonPushedFcn = createCallbackFcn(app, @GraphicalrefineButtonPushed, true);
            app.GraphicalrefineButton.BackgroundColor = [0 1 0];
            app.GraphicalrefineButton.FontWeight = 'bold';
            app.GraphicalrefineButton.Layout.Row = [4 5];
            app.GraphicalrefineButton.Layout.Column = [1 6];
            app.GraphicalrefineButton.Text = 'Graphical refine';

            % Create LockoriginalButton
            app.LockoriginalButton = uibutton(app.GridLayout2, 'state');
            app.LockoriginalButton.ValueChangedFcn = createCallbackFcn(app, @ResetrefineButtonPushed, true);
            app.LockoriginalButton.Text = {'Lock pre-refine'; 'spike assignments'; '(resets refine)'};
            app.LockoriginalButton.BackgroundColor = [0.9412 0.9412 0.9412];
            app.LockoriginalButton.Layout.Row = [2 3];
            app.LockoriginalButton.Layout.Column = [1 6];

            % Create ResetrefineButton
            app.ResetrefineButton = uibutton(app.GridLayout2, 'push');
            app.ResetrefineButton.ButtonPushedFcn = createCallbackFcn(app, @ResetrefineButtonPushed, true);
            app.ResetrefineButton.Layout.Row = 1;
            app.ResetrefineButton.Layout.Column = [1 6];
            app.ResetrefineButton.Text = 'Reset refine';

            % Create LossTagButton
            app.LossTagButton = uibutton(app.GridLayout2, 'push');
            app.LossTagButton.ButtonPushedFcn = createCallbackFcn(app, @LossTagButtonPushed, true);
            app.LossTagButton.Layout.Row = 13;
            app.LossTagButton.Layout.Column = [1 3];
            app.LossTagButton.Text = 'Loss';

            % Create GainTagButton
            app.GainTagButton = uibutton(app.GridLayout2, 'push');
            app.GainTagButton.ButtonPushedFcn = createCallbackFcn(app, @GainTagButtonPushed, true);
            app.GainTagButton.Layout.Row = 13;
            app.GainTagButton.Layout.Column = [4 6];
            app.GainTagButton.Text = 'Gain';

            % Create HistogramxlimLabel
            app.HistogramxlimLabel = uilabel(app.GridLayout2);
            app.HistogramxlimLabel.HorizontalAlignment = 'center';
            app.HistogramxlimLabel.FontWeight = 'bold';
            app.HistogramxlimLabel.Layout.Row = 8;
            app.HistogramxlimLabel.Layout.Column = [1 3];
            app.HistogramxlimLabel.Text = 'Hist bin size';

            % Create histBinEditField
            app.histBinEditField = uieditfield(app.GridLayout2, 'numeric');
            app.histBinEditField.Editable = 'off';
            app.histBinEditField.Layout.Row = 9;
            app.histBinEditField.Layout.Column = [1 6];
            app.histBinEditField.Value = 0.01;

            % Create TagsDropDown
            app.TagsDropDown = uidropdown(app.GridLayout2);
            app.TagsDropDown.Items = {'All'};
            app.TagsDropDown.Layout.Row = 12;
            app.TagsDropDown.Layout.Column = [1 6];
            app.TagsDropDown.Value = 'All';

            % Create ToggleGainLossbytagsDropDownLabel
            app.ToggleGainLossbytagsDropDownLabel = uilabel(app.GridLayout2);
            app.ToggleGainLossbytagsDropDownLabel.HorizontalAlignment = 'center';
            app.ToggleGainLossbytagsDropDownLabel.FontWeight = 'bold';
            app.ToggleGainLossbytagsDropDownLabel.Layout.Row = 11;
            app.ToggleGainLossbytagsDropDownLabel.Layout.Column = [1 6];
            app.ToggleGainLossbytagsDropDownLabel.Text = 'Toggle Gain/Loss by tags';

            % Create AutoButton
            app.AutoButton = uibutton(app.GridLayout2, 'state');
            app.AutoButton.ValueChangedFcn = createCallbackFcn(app, @AutoButtonValueChanged, true);
            app.AutoButton.Text = 'Auto';
            app.AutoButton.Layout.Row = 8;
            app.AutoButton.Layout.Column = [4 6];
            app.AutoButton.Value = true;

            % Create ShowtraceButton
            app.ShowtraceButton = uibutton(app.GridLayout2, 'state');
            app.ShowtraceButton.Enable = 'off';
            app.ShowtraceButton.Text = 'Show trace';
            app.ShowtraceButton.Layout.Row = 6;
            app.ShowtraceButton.Layout.Column = [1 6];

            % Create TabGroup
            app.TabGroup = uitabgroup(app.GridLayout);
            app.TabGroup.Layout.Row = 1;
            app.TabGroup.Layout.Column = 2;

            % Create ScalingsTab
            app.ScalingsTab = uitab(app.TabGroup);
            app.ScalingsTab.Title = 'Scalings';

            % Create GridLayout3
            app.GridLayout3 = uigridlayout(app.ScalingsTab);
            app.GridLayout3.ColumnWidth = {'1x'};
            app.GridLayout3.RowHeight = {'1x'};
            app.GridLayout3.ColumnSpacing = 0;
            app.GridLayout3.RowSpacing = 0;
            app.GridLayout3.Padding = [0 0 0 0];

            % Create ScalingTable
            app.ScalingTable = uitable(app.GridLayout3);
            app.ScalingTable.ColumnName = {'Scaling'; 'Gain'; 'Loss'; 'Show'};
            app.ScalingTable.ColumnWidth = {'auto', 50, 50, 50};
            app.ScalingTable.RowName = {'Unit'};
            app.ScalingTable.ColumnEditable = [true true true true];
            app.ScalingTable.CellEditCallback = createCallbackFcn(app, @ScalingTableCellEdit, true);
            app.ScalingTable.Layout.Row = 1;
            app.ScalingTable.Layout.Column = 1;

            % Create TagsTab
            app.TagsTab = uitab(app.TabGroup);
            app.TagsTab.Title = 'Tags';

            % Create GridLayout6
            app.GridLayout6 = uigridlayout(app.TagsTab);
            app.GridLayout6.ColumnWidth = {'1x'};
            app.GridLayout6.RowHeight = {'1x'};
            app.GridLayout6.ColumnSpacing = 0;
            app.GridLayout6.RowSpacing = 0;
            app.GridLayout6.Padding = [0 0 0 0];

            % Create TagTable
            app.TagTable = uitable(app.GridLayout6);
            app.TagTable.ColumnName = {'Junk'};
            app.TagTable.RowName = {};
            app.TagTable.ColumnEditable = true;
            app.TagTable.Layout.Row = 1;
            app.TagTable.Layout.Column = 1;

            % Show the figure after all components are created
            app.SortingrefinerUIFigure.Visible = 'on';
        end
    end

    % App creation and deletion
    methods (Access = public)

        % Construct app
        function app = refineGUI(varargin)

            % Create UIFigure and components
            createComponents(app)

            % Register the app with App Designer
            registerApp(app, app.SortingrefinerUIFigure)

            % Execute the startup function
            runStartupFcn(app, @(app)startupFcn(app, varargin{:}))

            if nargout == 0
                clear app
            end
        end

        % Code that executes before app deletion
        function delete(app)

            % Delete UIFigure when app is deleted
            delete(app.SortingrefinerUIFigure)
        end
    end
end]]></w:t></w:r></w:p></w:body></w:document>