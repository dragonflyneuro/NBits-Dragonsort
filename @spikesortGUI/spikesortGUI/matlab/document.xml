<?xml version="1.0" encoding="UTF-8" standalone="no" ?><w:document xmlns:w="http://schemas.openxmlformats.org/wordprocessingml/2006/main"><w:body><w:p><w:pPr><w:pStyle w:val="code"/></w:pPr><w:r><w:t><![CDATA[classdef spikesortGUI < matlab.apps.AppBase

    % Properties that correspond to app components
    properties (Access = public)
        UIBase                        matlab.ui.Figure
        SessionMenu                   matlab.ui.container.Menu
        InitialiseMenu                matlab.ui.container.Menu
        LoadMenu                      matlab.ui.container.Menu
        SaveMenu                      matlab.ui.container.Menu
        SaveFiguresMenu               matlab.ui.container.Menu
        AddtimestampMenu              matlab.ui.container.Menu
        UndoMenu                      matlab.ui.container.Menu
        RedoMenu                      matlab.ui.container.Menu
        PanelsMenu                    matlab.ui.container.Menu
        ViewmetricsrowMenu            matlab.ui.container.Menu
        LZoomMenu                     matlab.ui.container.Menu
        LResetMenu                    matlab.ui.container.Menu
        LPanMenu                      matlab.ui.container.Menu
        LPointerMenu                  matlab.ui.container.Menu
        LUnselectMenu                 matlab.ui.container.Menu
        TZoomMenu                     matlab.ui.container.Menu
        TResetMenu                    matlab.ui.container.Menu
        TPanMenu                      matlab.ui.container.Menu
        TPointerMenu                  matlab.ui.container.Menu
        TUnselectMenu                 matlab.ui.container.Menu
        MatchunityaxisMenu            matlab.ui.container.Menu
        TimelineMenu                  matlab.ui.container.Menu
        PreviousbatchMenu             matlab.ui.container.Menu
        NextbatchMenu                 matlab.ui.container.Menu
        UnitfrequencyMenu             matlab.ui.container.Menu
        ScrubthroughunitMenu          matlab.ui.container.Menu
        SortingMenu                   matlab.ui.container.Menu
        NewunitMenu                   matlab.ui.container.Menu
        AddspikeMenu                  matlab.ui.container.Menu
        ForceaddMenu                  matlab.ui.container.Menu
        RemovespikeMenu               matlab.ui.container.Menu
        SplitMenu                     matlab.ui.container.Menu
        MergeMenu                     matlab.ui.container.Menu
        AutosplitMenu                 matlab.ui.container.Menu
        AutomergeMenu                 matlab.ui.container.Menu
        RefinebatchMenu               matlab.ui.container.Menu
        OthersMenu                    matlab.ui.container.Menu
        HelpMenu                      matlab.ui.container.Menu
        MainGrid                      matlab.ui.container.GridLayout
        MetricGrid_4                  matlab.ui.container.GridLayout
        MetricControlGrid_4           matlab.ui.container.GridLayout
        MetricDropDown_4              matlab.ui.control.DropDown
        MetricPanel_4                 matlab.ui.container.Panel
        MetricGrid_3                  matlab.ui.container.GridLayout
        MetricControlGrid_3           matlab.ui.container.GridLayout
        MetricDropDown_3              matlab.ui.control.DropDown
        MetricPanel_3                 matlab.ui.container.Panel
        MetricGrid_2                  matlab.ui.container.GridLayout
        MetricDropDown_2              matlab.ui.control.DropDown
        MetricControlGrid_2           matlab.ui.container.GridLayout
        MetricPanel_2                 matlab.ui.container.Panel
        GridLayout                    matlab.ui.container.GridLayout
        dataPanel                     matlab.ui.container.Panel
        GridLayout2                   matlab.ui.container.GridLayout
        TMultiButton                  matlab.ui.control.Button
        TTitle                        matlab.ui.control.EditField
        MetricGrid_1                  matlab.ui.container.GridLayout
        MetricControlGrid_1           matlab.ui.container.GridLayout
        MetricDropDown_1              matlab.ui.control.DropDown
        MetricPanel_1                 matlab.ui.container.Panel
        ColourGrid                    matlab.ui.container.GridLayout
        ControlTabs                   matlab.ui.container.TabGroup
        GeneralTab                    matlab.ui.container.Tab
        GeneralGrid                   matlab.ui.container.GridLayout
        MiscGrid                      matlab.ui.container.GridLayout
        AllOverviewButton             matlab.ui.control.Button
        OverviewDropDown              matlab.ui.control.DropDown
        CleanupButton                 matlab.ui.control.Button
        AutocreateunitsButton         matlab.ui.control.Button
        AccessoryfunctionsLabel       matlab.ui.control.Label
        ManipulationGrid              matlab.ui.container.GridLayout
        OperationTargetPanel          matlab.ui.container.Panel
        OperationtargetGrid           matlab.ui.container.GridLayout
        AutosplitintoLabel            matlab.ui.control.Label
        AutosplitField                matlab.ui.control.NumericEditField
        BatchButton                   matlab.ui.control.StateButton
        PlottedButton                 matlab.ui.control.StateButton
        SelectedButton                matlab.ui.control.StateButton
        AutomergeButton               matlab.ui.control.Button
        AutosplitButton               matlab.ui.control.Button
        MergeButton                   matlab.ui.control.Button
        ForceaddButton                matlab.ui.control.Button
        NewunitButton                 matlab.ui.control.Button
        SplitButton                   matlab.ui.control.Button
        RemovespikeButton             matlab.ui.control.Button
        AddspikeButton                matlab.ui.control.Button
        DeleteunitButton              matlab.ui.control.Button
        UnitmanipulationLabel         matlab.ui.control.Label
        DatascrubGrid                 matlab.ui.container.GridLayout
        GotobatchField                matlab.ui.control.NumericEditField
        GotobatchButton               matlab.ui.control.Button
        RefinebatchButton             matlab.ui.control.Button
        AutosortbatchButton           matlab.ui.control.Button
        uptoField                     matlab.ui.control.NumericEditField
        AutosortButton                matlab.ui.control.Button
        NextbatchButton               matlab.ui.control.Button
        PreviousbatchButton           matlab.ui.control.Button
        ScrubdataLabel                matlab.ui.control.Label
        ParametersdataTab             matlab.ui.container.Tab
        ParametersGrid                matlab.ui.container.GridLayout
        TemplategenerateionGrid       matlab.ui.container.GridLayout
        TemplatecropwidthEditField    matlab.ui.control.NumericEditField
        TemplatewidthcropfactorLabel  matlab.ui.control.Label
        TemplategenerationLabel       matlab.ui.control.Label
        PastbatchesTField             matlab.ui.control.NumericEditField
        PastbatchesLabel_2            matlab.ui.control.Label
        SpikesusedEditField           matlab.ui.control.NumericEditField
        SpikestotalEditFieldLabel     matlab.ui.control.Label
        FuturebatchesTField           matlab.ui.control.NumericEditField
        FuturebatchesLabel_2          matlab.ui.control.Label
        InfoGrid                      matlab.ui.container.GridLayout
        SavenamecopyButton            matlab.ui.control.Button
        BinarynamecopyButton          matlab.ui.control.Button
        SavenameEditField             matlab.ui.control.EditField
        SavenameEditFieldLabel        matlab.ui.control.Label
        BinaryEditFieldLabel          matlab.ui.control.Label
        BinaryEditField               matlab.ui.control.EditField
        ThresholdsGrid                matlab.ui.container.GridLayout
        FuzzyDetButton                matlab.ui.control.StateButton
        SpikeLabel                    matlab.ui.control.Label
        DetectThr2EditField           matlab.ui.control.NumericEditField
        FuzzyButton                   matlab.ui.control.StateButton
        DetectThr1EditField           matlab.ui.control.NumericEditField
        AmplitudelimitsLabel          matlab.ui.control.Label
        NewunitsLabel                 matlab.ui.control.Label
        NewField                      matlab.ui.control.NumericEditField
        OldField                      matlab.ui.control.NumericEditField
        ExistingunitsLabel            matlab.ui.control.Label
        ThresholdsLabel               matlab.ui.control.Label
        ViewingGrid                   matlab.ui.container.GridLayout
        yLimHighField                 matlab.ui.control.NumericEditField
        BatchsizeEditField            matlab.ui.control.NumericEditField
        BatchSizesamplesLabel         matlab.ui.control.Label
        yLimLowField                  matlab.ui.control.NumericEditField
        YlimitLabel                   matlab.ui.control.Label
        FuturebatchesField            matlab.ui.control.NumericEditField
        FuturebatchesLabel            matlab.ui.control.Label
        DataviewingLabel              matlab.ui.control.Label
        PastbatchesField              matlab.ui.control.NumericEditField
        PastbatchesLabel              matlab.ui.control.Label
        SpikeshownField               matlab.ui.control.NumericEditField
        SpikestotalLabel              matlab.ui.control.Label
        AdvancedTab                   matlab.ui.container.Tab
        AdvancedGrid                  matlab.ui.container.GridLayout
        MultichannelGrid              matlab.ui.container.GridLayout
        MainchannelDropDown           matlab.ui.control.DropDown
        MainchannelDropDownLabel      matlab.ui.control.Label
        MultichannelLabel             matlab.ui.control.Label
        TemplategenerationGrid        matlab.ui.container.GridLayout
        ImportsampleweightsButton     matlab.ui.control.Button
        ShowsampleweightsButton       matlab.ui.control.Button
        ImporttemplatesButton         matlab.ui.control.Button
        ShowtemplatesButton           matlab.ui.control.Button
        AdvTemplategenerationLabel    matlab.ui.control.Label
        TaggingGrid                   matlab.ui.container.GridLayout
        TagmanagementButton           matlab.ui.control.Button
        TagDropDown                   matlab.ui.control.DropDown
        ToggletagButton               matlab.ui.control.Button
        TagLabel                      matlab.ui.control.Label
        UnitGrid                      matlab.ui.container.GridLayout
        FeatureviewtypeDropDown       matlab.ui.control.DropDown
        FeatureviewtypeLabel          matlab.ui.control.Label
        OtherLabel                    matlab.ui.control.Label
        SpikewidthEditField           matlab.ui.control.NumericEditField
        SpikeWidthLabel               matlab.ui.control.Label
        TimelineGrid                  matlab.ui.container.GridLayout
        TimelineLabel                 matlab.ui.control.Label
        VieweventmarkersButton        matlab.ui.control.StateButton
        ImporteventmarkerdataButton   matlab.ui.control.Button
        ManualartifactremoverButton   matlab.ui.control.StateButton
        RGrid                         matlab.ui.container.GridLayout
        RControlGrid                  matlab.ui.container.GridLayout
        RTitle                        matlab.ui.control.EditField
        RMultiButton                  matlab.ui.control.Button
        RightUnitDropDown             matlab.ui.control.DropDown
        RPanel                        matlab.ui.container.Panel
        LGrid                         matlab.ui.container.GridLayout
        LControlGrid                  matlab.ui.container.GridLayout
        SwapButton                    matlab.ui.control.Button
        LMultiButton                  matlab.ui.control.Button
        LTitle                        matlab.ui.control.EditField
        LeftUnitDropDown              matlab.ui.control.DropDown
        LPanel                        matlab.ui.container.Panel
        StatusLabel                   matlab.ui.control.EditField
    end


    properties (Access = private)
        %   outputs
        m % contains general metadata
        fm % memmapfile of raw data
        fid % raw data
        unitArray = unit();% contains unit_, waves_, clusters, junkNames
        t % contains sorting helper data

        %   general plotting
        xi % data trace
        msConvert % sample space to time conversion

        %   left unit interaction
        plottedWavesIdx = []; % indices along left unit for waves plotted in left unit

        %   plot object handles
        leftUnitLines = []; % left unit waves
        leftUnitSpikeMarkers = []; % left unit trace markers
        leftUnitAllChAx = []; % left unit subplots
        leftUnitFeatureMarkers = [];
        leftUnitSelectionBox = gobjects(1); % temporary objects to show user selection regions

        rightUnitLines = []; % right unit waves
        rightUnitSpikeMarkers = []; % right unit trace markers
        rightUnitAllChAx = []; % right unit subplots

        assignedSpikeMarkers = []; % markers on trace for assigned spikes
        artifactMarkerArr = []; % shaded areas on trace for manual no-spike regions
        selectionBox = gobjects(1); % temporary objects to show user selection regions
        eventMarkerArr = []; % shaded areas on trace for event marker regions
        dataLine = []; % raw data trace

        unassignedSpikeMarkers = []; % markers on trace for unassigned spikes
        selectedSpikeMarkers = []; % markers on trace for selected unassigned spikes
        unassignedFeatureMarkers = [];
        selectedFeatureMarkers = [];

        figureHandles = [];

        dataFeatureAx
        dataAllChAx = []; % trace subplots
        traceAx
        leftUnitAx
        rightUnitAx
        Metrics = struct();

        featureSelectMode = 'unassigned'

        %   keeping track
        historyStack = []; % last state of program for undoing
        counter
        currentBatch = 1; % current batch number
        rawSpikeWaves % the waveforms of spikes in current batch

        %   popups
        initialisePop % initialising sorting
        refinePop % refining sorting
        tagPop % tag manager for units

        basicModes
        configs

        colourButtons
    end

    properties (Access = public)
        savePath = []; % path used when saving sorting
        loadPath = [];

    end

    methods (Access = public)

        % initialise new sorting
        e = updateVars(app, newM, newT, newS)

        % update spike assignments from refine
        updateUnits(app, d, opt)

        function r = getBatchRange(app,varargin)
            c = app.currentBatch;
            bl = app.t.batchLengths;

            if nargin > 1
                spec = varargin{1};
                spec(spec > length(bl)) = length(bl);
                spec(spec < 1) = 1;
                spec = sort(spec);
                if length(spec) == 1
                    spec = [spec spec];
                end
            else
                spec = [c, c];
            end
            r = [sum(bl(1:spec(1)-1)), sum(bl(1:spec(2)))];
            if spec(1) ~= 1
                r(1) = r(1) - app.m.spikeWidth;
            end
        end
    end

    methods (Access = private)

        %% data input

        % read in data and filter for displaying
        readFilter(app, b)

        %% others

        % save current state of GUI and sorting
        addHistory(app)
        undoredo(app, dir)

        %% unit manipulation

        % reassign s.unit_ and s.waves_ structures
        % unitReassigner(app, uIdx, u, w)


        %% callbacks

        % callback for pressing colourful buttons bottom right
        UnitButtonPushed(app, src, evt)


        %% unit interaction

        % update dropdown for units
        function [] = updateDropdown(app, varargin)

            app.LeftUnitDropDown.Items = string(1:length(app.unitArray));
            app.RightUnitDropDown.Items = app.LeftUnitDropDown.Items;
            createColourCodes(app);

            if nargin < 2
                return;
            end
            mode = varargin{1};
            current = [string(app.LeftUnitDropDown.Value), string(app.RightUnitDropDown.Value)];
            if any(strcmpi(mode, ["add", "remove"]))
                return;
            elseif strcmpi(mode, "split")
                app.RightUnitDropDown.Value = app.RightUnitDropDown.Items(end);
            elseif strcmpi(mode, "merge")
                c = app.currentBatch;
                bl = app.t.batchLengths;

                plotBatch = c + [-round(app.PastbatchesField.Value), min([round(app.FuturebatchesField.Value), length(bl)-c])];
                if isempty(app.unitArray(str2double(current(1))).getAssignedSpikes(getBatchRange(app,plotBatch)))
                    if current(1) > current(2)
                        app.LeftUnitDropDown.Value = current(2);
                        if str2double(current(2)) > 1
                            app.RightUnitDropDown.Value = string(str2double(current(2))-1);
                        end
                    elseif current(1) < current(2)
                        app.LeftUnitDropDown.Value = string(str2double(current(2))-1);
                    end
                end

                app.RightUnitDropDown.Value = app.RightUnitDropDown.Value(1);
            end
        end

        function [] = standardUpdate(app)
            app.redrawTracePlot();
            app.redrawUnitPlots();
            app.redrawMetric();
            app.StatusLabel.Value = "Ready";
            app.addHistory();
        end


    end

    % Callbacks that handle component events
    methods (Access = private)

        % Code that executes after component creation
        function startupFcn(app)
            app.traceAx = axes('Parent',app.dataPanel);
            app.leftUnitAx = axes('Parent',app.LPanel);
            app.rightUnitAx = axes('Parent',app.RPanel);

            app.parseConfig();
            app.UIBase.KeyPressFcn = @app.hotkeyPress;
            setupUserdata(app);
            setupFigures(app);
            app.switchButtons('opsOff');

            % initialise sorting variables
            app.updateDropdown();
            app.LeftUnitDropDown.FontColor = getColour(str2double(app.LeftUnitDropDown.Value));
            app.RightUnitDropDown.FontColor = getColour(str2double(app.RightUnitDropDown.Value));

            app.figureHandles = [app.traceAx, app.leftUnitAx, app.rightUnitAx];
            for ii = 1:length(app.figureHandles)
                hold(app.figureHandles(ii), 'on');
            end

            app.basicModes = uiToggleGroup([app.SelectedButton, app.PlottedButton, app.BatchButton],...
                ["selected","plotted","batch"]);

            app.ColourGrid.ColumnWidth = repmat({'1x'},[1,25]);
            app.colourButtons = app.createColourCodes();
            [app.colourButtons.Enable] = deal('off');

            app.Metrics.gridArr = [app.MetricGrid_1, app.MetricGrid_2, app.MetricGrid_3, app.MetricGrid_4];
            app.Metrics.controlGridArr = [app.MetricControlGrid_1, app.MetricControlGrid_2, app.MetricControlGrid_3, app.MetricControlGrid_4];
            app.Metrics.dropDownArr = [app.MetricDropDown_1, app.MetricDropDown_2, app.MetricDropDown_3, app.MetricDropDown_4];
            app.Metrics.panelArr = [app.MetricPanel_1, app.MetricPanel_2, app.MetricPanel_3, app.MetricPanel_4];
            app.Metrics.axArr = gobjects(4);

        end

        % Menu selected function: InitialiseMenu
        function InitialiseButtonPushed(app, event)
            % load dataset and initialise sorting session. See
            % initialisePopup for more info

            app.switchButtons('menuOff');
            if isfield(app.m,'sRateHz')
                app.initialisePop = initialisePopup(app,app.m,app.t);
            else
                app.initialisePop = initialisePopup(app);
            end

        end

        % Menu selected function: LoadMenu
        function LoadButtonPushed(app, event)
            % load a previous sorting

            app.StatusLabel.Value = "Loading...";
            drawnow
            app.switchButtons('menuOn')

            [fN, fP] = uigetfile([app.loadPath '*.mat'],'Pick *.mat file to load');
            if fN < 1
                app.StatusLabel.Value = "Could not load file!";
                return;
            end
            cd(fP);
            figure(app.UIBase);

            % check if the loaded file has m, s and t
            inFile = whos('-file',[fP fN]);
            if ~any(strcmp('m',{inFile(:).name})) || ~any(strcmp('t',{inFile(:).name}))
                app.StatusLabel.Value = "The structures 'm', or 't' do not exist!";
                return;
            end
            if ~any(strcmp('s',{inFile(:).name}))
                tData = load([fP fN],'m','t','unitArray');
                tData.s = tData.unitArray;
            else
                tData = load([fP fN],'m','s','t');
            end

            if app.updateVars(tData.m, tData.t, tData.s)
                app.StatusLabel.Value = "Load cancelled";
                return;
            end

            app.loadPath = fP;
            app.savePath = fP;

        end

        % Button pushed function: ImporttemplatesButton
        function ImporttemplatesMenuSelected(app, event)
            % import templates from a previous sorting from this/another
            % dataset and use them to initialise new units in this sorting

            for ii = 1:length(app.unitArray)
                if ~isempty(app.unitArray(ii).loadedTemplateWaves)
                    answer = uiconfirm(app.UIBase,"Templates have already been imported! Load more?","Warning",...
                        'Icon','warning','DefaultOption',2);
                    if strcmpi(answer, "CANCEL")
                        return;
                    end
                    break;
                end
            end

            app.StatusLabel.Value = "Loading...";
            drawnow

            app.switchButtons('menuOn')

            % load .mat file of a previous sorting
            [fN, fP] = uigetfile([app.loadPath '*.mat'],'Pick *.mat file to import as templates');
            if fN < 1
                app.StatusLabel.Value = "Could not load file!";
                return;
            end

            % check if the loaded file has s.clusters
            inFile = whos('-file',[fP fN]);
            if any(strcmp('unitArray',{inFile(:).name}))
                tData = load([fP fN], 'unitArray');
                rge = 1:length(tData.unitArray);
            elseif any(strcmp('s',{inFile(:).name}))
                tData = load([fP fN], 's');
                if ~isfield(tData.s,'clusters')
                    app.StatusLabel.Value = "The structure 's.clusters' does not exist!";
                    return;
                end
                rge = tData.s.clusters;
            else
                app.StatusLabel.Value = "The structure 's.clusters' or 'unitArray' does not exist!";
                return;
            end

            msg = 'Choose template harvesting location from dataset:';
            title = 'Choose template harvesting location';
            answer = uiconfirm(app.UIBase,msg,title,...
                'Options',{'Start','End','Cancel'},...
                'DefaultOption',2,'CancelOption',3);

            if strcmpi(answer,'CANCEL')
                return;
            end

            originName = string([fP, fN]);

            for ii = 1:length(rge)
                if isa(rge, 'double')
                    originUnit = ii;
                    w = tData.unitArray(ii).waves;
                else
                    originUnit = str2double(tData.s.clusters(ii));
                    w = tData.s.("waves_"+tData.s.clusters(ii));
                end
                if size(w,1) > app.SpikesusedEditField.Value
                    % put templates into t structure based on harvesting location
                    if strcmpi(answer, 'End')
                        w = w(end-app.SpikesusedEditField.Value+1:end,:,:);
                    elseif strcmpi(answer, 'Start')
                        w = w(1:app.SpikesusedEditField.Value,:,:);
                    end
                end

                app.unitArray = [app.unitArray, unit([],[],app.m.mainCh,...
                    originName,answer,originUnit,w)];
            end

            app.updateDropdown();
            app.LeftUnitDropDown.Value = string(length(app.unitArray));
            app.redrawUnitPlots();
            app.ShowtemplatesButton.Enable = 1;

            app.StatusLabel.Value = "Ready";
            app.addHistory();

        end

        % Menu selected function: SaveMenu
        function SaveButtonPushed(app, event)
            % save current sorting

            app.StatusLabel.Value = "Saving...";
            drawnow

            if app.savePath == 0
                app.savePath = app.m.fP;
            end
            sP = uigetdir(app.savePath,'Select save path');

            figure(app.UIBase);
            if sP == 0
                app.StatusLabel.Value = "Ready";
                return;
            end
            app.savePath = sP;
            m = app.m; %#ok<ADPROPLC>
            unitArray = app.unitArray; %#ok<ADPROPLC>
            t = app.t; %#ok<ADPROPLC>
            %             m.msec = app.m.sRateHz/1000; %#ok<ADPROPLC> % need this for further pipeline stuff - REMOVE

            if app.AddtimestampMenu.Checked
                timeStamp = "_"+datestr(now,'yymmddHHMM');
            else
                timeStamp = "";
            end
            sN = app.SavenameEditField.Value+timeStamp+".mat";
            save(app.savePath+string(filesep)+sN,'m', 'unitArray', 't');
            app.StatusLabel.Value = "Saved! (" + sN + ")";

        end

        % Value changed function: LeftUnitDropDown
        function LeftUnitDropDownValueChanged(app, event)
            app.redrawUnitPlots(1);
            selection = contains({app.Metrics.dropDownArr.Value},'(right)')...
                | contains({app.Metrics.dropDownArr.Value},'(global)');
            app.redrawMetric(find(~selection));

        end

        % Value changed function: RightUnitDropDown
        function RightUnitDropDownValueChanged(app, event)
            app.redrawUnitPlots(2);
            selection = contains({app.Metrics.dropDownArr.Value},'(left)')...
                | contains({app.Metrics.dropDownArr.Value},'(global)');
            app.redrawMetric(find(~selection));

        end

        % Callback function: GotobatchButton, NextbatchButton, 
        % ...and 3 other components
        function GotobatchButtonPushed(app, event)
            % move to a chosen batch
            bl = app.t.batchLengths;
            c = app.currentBatch;

            value = event.Source.UserData;
            if value == 0
                value = round(app.GotobatchField.Value);
            else
                value = value + c;
            end
            if value == app.currentBatch
                return;
            end

            if value < 1
                value = 1;
            elseif value > length(bl)
                value = length(bl);
            end

            app.StatusLabel.Value = "Loading new batch of data...";
            drawnow

            app.readFilter(value);

            app.redrawTracePlot();
            app.redrawUnitPlots();
            app.redrawMetric(find(contains({app.Metrics.dropDownArr.Value},'(batch)')));
            app.StatusLabel.Value = "Ready";
            app.addHistory();

        end

        % Button pushed function: CleanupButton
        function CleanupButtonPushed(app, event)
            % cleans up unit label numbers and removes empty units

            if length(app.unitArray) <= 1
                return;
            end

            app.StatusLabel.Value = "Cleaning up units...";
            drawnow

            app.unitArray = app.unitArray.unitRefactorer();
            app.unitArray = app.unitArray.unitSorter();
            app.updateDropdown();

            standardUpdate(app);

        end

        % Menu selected function: RedoMenu, UndoMenu
        function UndoMenuSelected(app, event)
            app.undoredo(event.Source.UserData);

        end

        % Callback function: NewunitButton, NewunitMenu
        function NewunitButtonPushed(app, event)
            % create a new unit

            app.StatusLabel.Value = "Adding unit...";
            drawnow

            app.unitArray = [app.unitArray, unit()];
            app.updateDropdown();
            app.LeftUnitDropDown.Value = string(length(app.unitArray));
            app.LTitle.Value ="";

            app.redrawUnitPlots();
            app.StatusLabel.Value = "Ready";
            app.addHistory();

        end

        % Button pushed function: AutocreateunitsButton
        function AutocreateunitsButtonPushed(app, event)
            % auto-generates units using PCA then deviation index thresholding

            app.switchButtons('menuOff');
            app.switchButtons('opsOff');

            range = getBatchRange(app);
            [unassignedSpikes, ~, unassignedInBatch] = app.unitArray.getUnassignedSpikes(app.t.rawSpikeSample,range);
            unassignedWaves = app.rawSpikeWaves(unassignedInBatch,:,:);

            if isempty(unassignedSpikes)
                app.StatusLabel.Value = "No unassigned spikes to put in units in this batch!";
                return;
            end

            % ask user for amplitude cutoff point for spikes used in unit generation
            if event.Source.UserData == 0
                prompt = {'Create k units from spikes with peak amplitude MORE -VE than (uV):',...
                    'k (expected units + a couple)'};
                d = 0;
                % else
                %     prompt = {'Create k JUNK units from spikes with peak amplitude MORE +VE than (uV):',...
                %         'k (expected units + a couple)'};
                %     d = 1;
            end
            answer = inputdlg(prompt, 'Create units', [1 35]);

            if isempty(answer)
                return;
            end
            if answer{2} < 0
                answer{2} = 3;
            end

            % generate units
            y = app.xi(app.m.mainCh,unassignedSpikes-range(1));
            app.autoCreateUnits(unassignedSpikes, unassignedWaves, y, app.t.add2UnitThr(2), app.m.sRateHz, ...
                str2double(answer{1}), str2double(answer{2}), d, app.FuzzyButton.Value,...
                app.t.templateCropFactor, app.t.deviationSampleWeights);

        end

        % Button pushed function: DeleteunitButton
        function DeleteunitButtonPushed(app, event)
            % delete a unit

            if length(app.LeftUnitDropDown.Items) == 1
                app.StatusLabel.Value = "Cannot delete the last unit";
                return;
            end

            app.StatusLabel.Value = "Deleting unit...";
            drawnow

            value = str2double(app.LeftUnitDropDown.Value);
            app.unitArray(value) = [];

            app.updateDropdown();
            app.LeftUnitDropDown.Value = string(1);
            standardUpdate(app);

        end

        % Callback function: MergeButton, MergeMenu, RemovespikeButton, 
        % ...and 3 other components
        function basicopsButtonPushed(app, event)
            % unassign currently selected spikes in left unit
            value(1) = str2double(app.LeftUnitDropDown.Value);
            value(2) = str2double(app.RightUnitDropDown.Value);

            if isempty(app.unitArray(value(1)).spikeTimes)
                app.StatusLabel.Value = "Left unit is empty";
                return;
            end

            app.StatusLabel.Value = "Performing unit operations...";
            drawnow

            mode = app.basicModes.getUserData();
            if strcmpi(mode, "batch")
                [~,~,I] = app.unitArray(value(1)).getAssignedSpikes(getBatchRange(app));
            elseif strcmpi(mode, "plotted")
                pWI = get(app.leftUnitLines,'UserData');
                if iscell(pWI)
                    pWI = cell2mat(pWI);
                end
                I = pWI;
            elseif strcmpi(mode, "selected")
                pWI = get(app.leftUnitLines,'UserData');
                if iscell(pWI)
                    pWI = cell2mat(pWI);
                end
                I = pWI(app.leftUnitAx.UserData.selectedIdx);
            end

            [temp, e] = basicUnitOp(app.unitArray, event.Source.UserData.fnc, value, I);
            if isempty(e)
                app.unitArray = temp;
                app.updateDropdown(event.Source.UserData.label);
                standardUpdate(app);
            else
                app.StatusLabel.Value = e;
            end

        end

        % Callback function: AddspikeButton, AddspikeMenu, ForceaddButton, 
        % ...and 1 other component
        function AddspikeButtonPushed(app, event)
            % pick out spikes manually and add them to a unit either by
            % deviation matching or by force

            value = str2double(app.LeftUnitDropDown.Value);

            I = app.traceAx.UserData.selectedUnassigned;
            if isempty(I)
                return;
            end

            [unassignedSpikes, ~, unassignedInBatch] = app.unitArray.getUnassignedSpikes(app.t.rawSpikeSample,getBatchRange(app));
            unassignedWaves = app.rawSpikeWaves(unassignedInBatch,:,:);
            templateWaves = unassignedWaves(I,:,:);

            if event.Source.UserData == 0 % go through deviation matching to add new spikes to unit
                % add loaded template waves if they exist for this unit
                if ~isempty(app.unitArray(value).loadedTemplateWaves)
                    templateWaves = [app.unitArray(value).loadedTemplateWaves; templateWaves];
                end
                matches = deviationTemplateMatch(unassignedWaves, templateWaves, app.m.sRateHz, ...
                    app.t.add2UnitThr(2), app.FuzzyButton.Value, app.t.templateCropFactor, app.t.deviationSampleWeights);
                if ~isempty(matches)
                    app.unitArray = app.unitArray.spikeAdder(value, unassignedSpikes(matches), ...
                        unassignedWaves(matches,:,:));
                end
            elseif event.Source.UserData == 1 % force add spikes to unit - no deviation matching
                app.unitArray = app.unitArray.spikeAdder(value, unassignedSpikes(I), ...
                    unassignedWaves(I,:,:));
            end

            standardUpdate(app);

        end

        % Callback function: AutosplitButton, AutosplitMenu
        function AutosplitButtonPushed(app, event)
            % perform PCA on the left unit to find clusters of similar spikes
            % to make units of. Asks user if they want to keep the new
            % assignment of spikes or not.

            value = str2double(app.LeftUnitDropDown.Value);
            if isempty(app.unitArray(value).spikeTimes)
                app.StatusLabel.Value = "Left unit is empty!";
                return;
            end

            mode = app.basicModes.getUserData();
            if strcmpi(mode, "batch")
                [~,~,I] = app.unitArray(value).getAssignedSpikes(getBatchRange(app));
            elseif strcmpi(mode, "plotted")
                pWI = get(app.leftUnitLines,'UserData');
                if iscell(pWI)
                    pWI = cell2mat(pWI);
                end
                I = pWI;
            elseif strcmpi(mode, "selected")
                pWI = get(app.leftUnitLines,'UserData');
                if iscell(pWI)
                    pWI = cell2mat(pWI);
                end
                I = pWI(app.leftUnitAx.UserData.selectedIdx);
            end

            if isempty(I)
                I = 1:length(app.unitArray(value).spikeTimes);
            end

            app.StatusLabel.Value = "Autosplitting left unit into " + string(app.AutosplitField.Value) + " units...";
            drawnow

            % PCA split unit and check if user confirmed
            [clust, yn] = unitAutoSplitter(app.unitArray, value, I, app.AutosplitField.Value, [app.yLimLowField.Value, app.yLimHighField.Value]);
            if ~yn
                return;
            end

            truncClust = unique(clust);
            truncClust = truncClust(2:end);
            unitSpikesBool = false(size(app.unitArray(value).spikeTimes));
            unitSpikesBool(I) = true;
            for ii = truncClust
                unitSpikesIdx = find(unitSpikesBool);
                app.unitArray = app.unitArray.unitSplitter(value, unitSpikesIdx(clust==ii));
                unitSpikesBool(unitSpikesIdx(clust==ii)) = [];
                clust(clust == ii) = [];
            end
            app.updateDropdown("remove");
            standardUpdate(app);

        end

        % Button pushed function: AutomergeButton
        function AutomergeButtonPushed(app, event)
            % perform PCA on the spikes of left unit to find other similar units.
            % Asks user if they want to keep the new assignment of spikes or not.

            value = str2double(app.LeftUnitDropDown.Value);
            if isempty(app.unitArray(value).spikeTimes)
                app.StatusLabel.Value = "Left unit is empty!";
                return;
            end

            mode = app.basicModes.getUserData();
            if strcmpi(mode, "batch")
                [~,~,I] = app.unitArray(value).getAssignedSpikes(getBatchRange(app));
            elseif strcmpi(mode, "plotted")
                pWI = get(app.leftUnitLines,'UserData');
                if iscell(pWI)
                    pWI = cell2mat(pWI);
                end
                I = pWI;
            elseif strcmpi(mode, "selected")
                pWI = get(app.leftUnitLines,'UserData');
                if iscell(pWI)
                    pWI = cell2mat(pWI);
                end
                I = pWI(app.leftUnitAx.UserData.selectedIdx);
            end

            if isempty(I)
                I = 1:length(app.unitArray(value).spikeTimes);
            end

            app.StatusLabel.Value = "Automerging left unit into other units...";
            drawnow

            % PCA split unit and check if user confirmed
            [clust, yn] = unitAutoMerger(app.unitArray, value, I, [app.yLimLowField.Value, app.yLimHighField.Value]);
            if ~yn
                return;
            end

            truncClust = unique(clust);
            unitSpikesBool = false(size(app.unitArray(value).spikeTimes));
            unitSpikesBool(I) = true;
            for ii = truncClust
                unitSpikesIdx = find(unitSpikesBool);
                app.unitArray = app.unitArray.unitMerger([value,ii], unitSpikesIdx(clust==ii));
                unitSpikesBool(unitSpikesIdx(clust==ii)) = [];
                clust(clust == ii) = [];
            end
            app.updateDropdown("remove");
            standardUpdate(app);

        end

        % Button pushed function: AutosortButton, AutosortbatchButton
        function AutosortButtonPushed(app, event)
            % sort unassigned spikes in current and future batches into currently initialised units

            if length(app.unitArray) == 1 && isempty(app.unitArray(1).spikeTimes)
                app.StatusLabel.Value = "No units to sort into!";
                return;
            end

            if event.Source.UserData == 0
                if app.currentBatch > round(app.uptoField.Value)
                    app.StatusLabel.Value = "End batch is before current batch!";
                    return;
                end
                if app.uptoField.Value > length(app.t.batchLengths)
                    batches = app.currentBatch:length(app.t.batchLengths);
                end
                app.StatusLabel.Value = "Autosorting up to batchn "+round(app.uptoField.Value);
                drawnow
            else
                batches = app.currentBatch;
                app.StatusLabel.Value = "Re-sorting batch...";
                drawnow
            end

            for ii = batches
                if event.Source.UserData == 0
                    app.readFilter(ii);
                end
                r = getBatchRange(app);
                [unassignedSpikes, ~, unassignedInBatch] = app.unitArray.getUnassignedSpikes(app.t.rawSpikeSample,r);
                unassignedWaves = app.rawSpikeWaves(unassignedInBatch,:,:);

                % assign spikes to units, if within deviation threshold
                templateBatches = [-app.PastbatchesTField.Value, app.FuturebatchesTField.Value];  % batches to make templates from
                r = getBatchRange(app, app.currentBatch+templateBatches);

                [devMatrix, ~, thr] = getDevMatrix(app.t.add2UnitThr(1), app.unitArray, unassignedWaves, r, ...
                    app.SpikesusedEditField.Value, app.m.sRateHz, app.FuzzyButton.Value);

                [devMins, devMinIdx] = min(devMatrix,[],2);

                % update structures
                for jj = 1:length(app.unitArray)
                    assigned = devMins < thr(jj);
                    assignedUnit = assigned.*devMinIdx;
                    I = assignedUnit == jj;
                    app.unitArray = app.unitArray.spikeAdder(jj, unassignedSpikes(I), ...
                        unassignedWaves(I,:,:));
                end
            end

            standardUpdate(app);

        end

        % Callback function: RefinebatchButton, RefinebatchMenu
        function RefinebatchButtonPushed(app, event)
            % refine deviation indices of spikes in current batch to try and assign
            % them. See refineGUI for more information

            % stop user from interacting with main GUI while refining
            app.switchButtons('menuOff');
            app.switchButtons('opsOff');

            % input variables to refineGUI
            r = getBatchRange(app);

            packet.xi = app.xi;
            packet.m = app.m;
            packet.unitArray = app.unitArray;
            packet.t = app.t;
            packet.rawSpikeWaves = app.rawSpikeWaves;
            packet.rawSpikeWavesTimes = app.t.rawSpikeSample(r(1) < app.t.rawSpikeSample & app.t.rawSpikeSample <= r(2));
            packet.currentBatch = app.currentBatch;
            packet.yL = [app.yLimLowField.Value, app.yLimHighField.Value];

            packet.numTemplates = app.SpikesusedEditField.Value;
            packet.templateBatches = [-app.PastbatchesTField.Value, app.FuturebatchesTField.Value];  % batches to make templates from

            app.refinePop = refineGUI(app, packet);
            app.StatusLabel.Value = "Refine window open!";

        end

        % Button pushed function: AllOverviewButton
        function AllOverviewButtonButtonPushed(app, event)
            unitsToPlot = 1:length(app.unitArray);
            junks = app.unitArray.tagcmpi("Junk");

            if any(junks)
                msg = 'Plot which units?';
                msgTitle = 'Show Overview';
                answer = uiconfirm(app.UIBase,msg,msgTitle,...
                    'Options',{'All','Exclude junk','Cancel'},...
                    'DefaultOption',1,'CancelOption',3);

                if strcmpi(answer, 'Exclude junk') % remove junk units from the plot
                    unitsToPlot = find(~junks);
                elseif strcmpi(answer, 'Cancel')
                    return;
                end
            end

            if isempty(unitsToPlot)
                app.StatusLabel.Value = "No units to plot!";
                return;
            end

            app.StatusLabel.Value = "Plotting unit overview...";
            drawnow

            if strcmp(app.OverviewDropDown.Value,'Waveforms')
                showSpikeOverview(app.unitArray, unitsToPlot, [app.yLimLowField.Value, app.yLimHighField.Value]);
            elseif strcmp(app.OverviewDropDown.Value,'PCA')
                showPCAOverview(app.unitArray, unitsToPlot)
            elseif strcmp(app.OverviewDropDown.Value,'LDA')
                showLDAOverview(app.unitArray, unitsToPlot)
            elseif strcmp(app.OverviewDropDown.Value,'Deviation')
                showDeviationOverview(app.unitArray, unitsToPlot)
            elseif strcmp(app.OverviewDropDown.Value,'X-correlogram')
                showXCorr(app.unitArray, unitsToPlot, app.m.sRateHz)
            end

            app.StatusLabel.Value = "Ready";

        end

        % Button pushed function: ShowtemplatesButton
        function ShowtemplatesButtonPushed(app, event)
            % if templates were imported from another sorting, display them along with
            % the units generated from them
            temp = [];
            for ii = 1:length(app.unitArray)
                temp = [temp; app.unitArray(ii).loadedTemplateWaves];
            end
            if isempty(temp)
                app.StatusLabel.Value = "There are no imported templates OR loaded templates are not used!";
                return;
            end

            showImportedTemplates(app.unitArray, [app.yLimLowField.Value, app.yLimHighField.Value])

        end

        % Menu selected function: LZoomMenu, TZoomMenu
        function ZoomMenuSelected(app, event)
            if event.Source.UserData == 'l'
                src = app.leftUnitAx;
            else
                src = app.traceAx;
            end

            if src.UserData.interactionType == 'p'
                pan(src,'off');
                zoom(src,'on');
                src.UserData.interactionType = 'z';
            elseif src.UserData.interactionType == 'z'
                zoom(src,'off');
                src.UserData.interactionType = 'n';
            else
                zoom(src,'on');
                src.UserData.interactionType = 'z';
            end

        end

        % Menu selected function: LPanMenu, TPanMenu
        function PanMenuSelected(app, event)
            if event.Source.UserData == 'l'
                src = app.leftUnitAx;
            else
                src = app.traceAx;
            end

            if src.UserData.interactionType == 'p'
                pan(src,'off');
                src.UserData.interactionType = 'n';
            elseif src.UserData.interactionType == 'z'
                zoom(src,'off');
                pan(src,'on');
                src.UserData.interactionType = 'p';
            else
                pan(src,'on');
                src.UserData.interactionType = 'p';
            end

        end

        % Menu selected function: LPointerMenu, TPointerMenu
        function PointerMenuSelected(app, event)
            if event.Source.UserData == 'l'
                src = app.leftUnitAx;
            else
                src = app.traceAx;
            end

            zoom(src,'off');
            pan(src,'off');
            src.UserData.interactionType = 'n';

        end

        % Menu selected function: TResetMenu
        function TResetMenuSelected(app, event)
            ylim(app.traceAx, [app.yLimLowField.Value, app.yLimHighField.Value]);
            if isempty(app.msConvert*size(app.xi,2))
                xlim(app.traceAx, [0 1]);
            else
                xlim(app.traceAx, [0 app.msConvert*size(app.xi,2)]);
            end

        end

        % Menu selected function: LResetMenu
        function LResetMenuSelected(app, event)
            ylim(app.leftUnitAx, [-inf inf]);
            xlim(app.leftUnitAx, [-inf inf]);

        end

        % Menu selected function: TUnselectMenu
        function TUnselectMenuSelected(app, event)
            delete(app.selectionBox);
            app.traceAx.UserData.selectedUnassigned = [];
            if ~isempty(app.selectedSpikeMarkers)
                for ii = 1:length(app.selectedSpikeMarkers)
                    if ishandle(app.selectedSpikeMarkers(ii))
                        delete(app.selectedSpikeMarkers(ii));
                    end
                end
            end

            if ~isempty(app.selectedFeatureMarkers)
                for ii = 1:length(app.selectedFeatureMarkers)
                    if ishandle(app.selectedFeatureMarkers(ii))
                        delete(app.selectedFeatureMarkers(ii));
                    end
                end
            end

            app.selectedSpikeMarkers = [];
            app.selectedFeatureMarkers = [];
        end

        % Menu selected function: LUnselectMenu
        function LUnselectMenuSelected(app, event)
            delete(app.leftUnitSelectionBox);
            app.leftUnitAx.UserData.selectedIdx = [];
            if ~isempty(app.leftUnitLines)
                for ii = 1:length(app.leftUnitLines)
                    if ishandle(app.leftUnitLines(ii)) && strcmp(app.leftUnitLines(ii).LineStyle, ':')
                        app.leftUnitLines(ii).LineStyle = '-';
                    end
                end
            end
        end

        % Menu selected function: MatchunityaxisMenu
        function MatchunityaxisMenuSelected(app, event)
            % make ylim same on left and right unit plots for ease of comparison

            y = ylim(app.leftUnitAx);
            y(2,:) = ylim(app.rightUnitAx);
            yN(1) = min(y(:,1),[],1);
            yN(2) = max(y(:,2),[],1);
            ylim(app.leftUnitAx, yN);
            ylim(app.rightUnitAx, yN);

        end

        % Value changed function: yLimHighField, yLimLowField
        function yLimLowFieldValueChanged(app, event)
            newYL = sort([app.yLimLowField.Value, app.yLimHighField.Value]);
            ylim(app.traceAx, newYL);
            ylim(app.leftUnitAx, newYL);
            ylim(app.rightUnitAx, newYL);
            app.yLimLowField.Value = newYL(1);
            app.yLimHighField.Value = newYL(2);

        end

        % Value changed function: SpikeshownField
        function SpikeshownFieldValueChanged(app, event)
            % set the maximum number of spikes shown in the unit figures

            app.redrawUnitPlots();

        end

        % Value changed function: FuturebatchesField, PastbatchesField
        function DrawnbatchesChanged(app, event)
            app.redrawUnitPlots();

        end

        % Value changed function: BatchsizeEditField
        function BatchsizeEditFieldValueChanged(app, event)
            % change viewing batch size

            value = app.BatchsizeEditField.Value;

            if value < app.SpikewidthEditField.Value*2 + 1
                app.StatusLabel.Value = "Batch size cannot be smaller than twice the spike width!...";
                app.BatchsizeEditField.Value = app.t.batchSize;
                return
            end

            app.t.batchSize = value;
            bl = app.t.batchLengths;

            app.StatusLabel.Value = "Changing batch size...";
            drawnow

            currentBatchStart = getBatchRange(app); % current batch starting sample
            currentBatchStart = currentBatchStart(1);
            batchNum = floor(app.m.fileSizeBytes/(app.m.dbytes*app.m.nChans*app.t.batchSize)); % new number of batches in dataset - 1
            app.t.batchLengths = [app.t.batchSize*ones(1, batchNum), app.m.fileSizeBytes/(app.m.dbytes*app.m.nChans)-app.t.batchSize*batchNum];

            % plot batch closest in sample number to the old batch
            blNew = app.t.batchLengths;
            closestBatch = interp1(cumsum([0 blNew]),1:length(blNew)+1,currentBatchStart,'nearest','extrap');
            %             offset = app.m.nChans*app.m.dbytes*sum(blNew(1:closestBatch-1));
            app.readFilter(closestBatch);

            standardUpdate(app);

        end

        % Value changed function: FuzzyDetButton
        function FuzzyDetButtonValueChanged(app, event)
            app.t.fuzzyDetFlag = app.FuzzyDetButton.Value;

        end

        % Value changed function: DetectThr1EditField, DetectThr2EditField
        function DetectThrChanged(app, event)
            %             re-detect spikes that are below the new amplitude threshold
            value = sort([app.DetectThr1EditField.Value, app.DetectThr2EditField.Value]);
            if value(2) < app.t.detectThr(2) || value(1) > app.t.detectThr(1) % remove prior detected spikes that are now below the threshold
                % warn user that spikes are about to be deleted
                msg = 'You are about to change spike detection threshold in a way that can result in deletion of assigned spikes. Continue?';
                title = 'Warning - spikes in danger';
                selection = uiconfirm(app.UIBase,msg,title,"Icon","warning");

                if strcmp(selection, 'OK')
                    app.StatusLabel.Value = "Spike detection amplitude changing...";
                    drawnow

                    app.t.detectThr = value;
                    for ii = 1:length(app.unitArray)
                        if ~isempty(app.unitArray(ii).spikeTimes)
                            outBool = app.unitArray(ii).waves(:,ceil(size(app.unitArray(ii).waves,2)/2),...
                                app.unitArray(ii).mainCh) > app.t.detectThr(2);
                            outBool = outBool | app.unitArray(ii).waves(:,ceil(size(app.unitArray(ii).waves,2)/2),...
                                app.unitArray(ii).mainCh) < app.t.detectThr(1);
                            app.unitArray = app.unitArray.spikeRemover(ii,outBool);
                        end
                    end
                    app.readFilter(app.currentBatch);
                    app.unitArray = app.unitArray.unitSorter();
                    standardUpdate(app);
                else
                    app.DetectThr1EditField.Value = app.t.detectThr(1);
                    app.DetectThr2EditField.Value = app.t.detectThr(2);
                end
            else
                app.StatusLabel.Value = "Spike detection amplitude changing...";
                drawnow

                app.t.detectThr = value;
                app.readFilter(app.currentBatch);
                standardUpdate(app);
            end

        end

        % Button pushed function: BinarynamecopyButton
        function BinarynamecopyButtonPushed(app, event)
            % copy loaded binary file save name to clipboard

            clipboard('copy', [app.m.fP app.m.fN]);
            app.StatusLabel.Value = "Binary path copied to clipboard!";

        end

        % Button pushed function: SavenamecopyButton
        function SavenamecopyButtonPushed(app, event)
            % copy sorting file save name to clipboard

            if app.AddtimestampMenu.Checked
                timeStamp = "_"+datestr(now,'yymmddHHMM');
            else
                timeStamp = "";
            end
            sN = string(app.SavenameEditField.Value)+timeStamp + ".mat";
            clipboard('copy', app.savePath+"\"+sN);
            app.StatusLabel.Value = "Saved data path copied to clipboard!";

        end

        % Menu selected function: AddtimestampMenu
        function AddtimestampMenuSelected(app, event)
            % add timestamp to sorting file save name
            if strcmp(app.AddtimestampMenu.Checked, 'on')
                app.AddtimestampMenu.Checked = 'off';
            else
                app.AddtimestampMenu.Checked = 'on';
            end

        end

        % Button pushed function: ToggletagButton
        function ToggletagButtonPushed(app, event)
            app.unitArray(str2double(app.LeftUnitDropDown.Value)) = app.unitArray(str2double(app.LeftUnitDropDown.Value)).tagToggler("Junk");
            app.redrawUnitPlots();
            app.addHistory();

        end

        % Button pushed function: TagmanagementButton
        function TagmanagementButtonPushed(app, event)
            app.switchButtons('menuOff');
            app.switchButtons('opsOff');

            app.tagPop = tagManager(app,app.unitArray);
            app.StatusLabel.Value = "Tag manager open!";

        end

        % Value changed function: ManualartifactremoverButton
        function ManualartifactremoverButtonValueChanged(app, event)
            value = app.ManualartifactremoverButton.Value;

            if value == 1
                manualArtifactRemover(app, app.traceAx);
            else
                app.switchButtons('menuOn');
                app.switchButtons('opsOn');

                %                 offset = -app.m.nChans*app.m.dbytes*size(app.xi,2);
                app.readFilter(app.currentBatch);
                standardUpdate(app);
            end

        end

        % Button pushed function: ImporteventmarkerdataButton
        function ImporteventmarkerdataButtonPushed(app, event)
            if isfield(app.t,"importedEventFileName") && ~isempty(app.t.importedEventFileName)
                answer = uiconfirm(app.UIBase,"Event markers have already been loaded in once! Overwrite?","Warning",...
                    'Icon','warning','DefaultOption',2);
                if strcmpi(answer, "CANCEL")
                    return;
                end
            end

            app.StatusLabel.Value = "Loading...";
            drawnow

            app.switchButtons('menuOn')

            [fN, fP] = uigetfile('*.mat','Pick *.mat file to load as event markers');
            if fN < 1
                app.StatusLabel.Value = "Could not load file!";
                return;
            end
            app.t.importedEventFileName = [fP, fN];

            [app.t.importedEventBounds, app.StatusLabel.Value] = importEventData([fP, fN]);
            app.VieweventmarkersButton.Enable = 1;
            app.VieweventmarkersButton.Value = 1;
            for ii = 1:length(app.eventMarkerArr)
                delete(app.eventMarkerArr(ii));
            end

            standardUpdate(app);
        end

        % Value changed function: VieweventmarkersButton
        function VieweventmarkersButtonValueChanged(app, event)
            app.redrawTracePlot();
            app.redrawUnitPlots();
        end

        % Button pushed function: ImportsampleweightsButton
        function ImportspikeshapeButtonPushed(app, event)
            if ~isempty(app.t.deviationSampleWeights)
                answer = uiconfirm(app.UIBase,"Deviation sample weights have already been loaded in once! Overwrite?","Warning",...
                    'Icon','warning','DefaultOption',2);
                if strcmpi(answer, "CANCEL")
                    return;
                end
            end

            app.StatusLabel.Value = "Loading...";
            drawnow

            app.switchButtons('menuOn')

            [fN, fP] = uigetfile('*.mat','Pick *.mat file to load as deviation sample weights');
            if fN < 1
                app.StatusLabel.Value = "Could not load file!";
                return;
            end

            input = load([fP fN]);
            vars = fieldnames(input);

            if length(vars) < 0 || length(vars) > 1
                return;
            end
            if min(size(input.(vars{1}))) > 1
                return;
            end
            if min(input.(vars{1})) < 0 || max(input.(vars{1})) > 1
                return;
            end

            if length(input.(vars{1})) < app.m.spikeWidth
                app.StatusLabel.Value = "The deviation sample weights must be longer than twice the spike width!";
                return;
            end

            app.t.deviationSampleWeights = input.(vars{1});
            app.ShowsampleweightsButton.Enable = 1;

            standardUpdate(app);
        end

        % Menu selected function: HelpMenu
        function HelpMenuSelected(app, event)
            open('Dragonsort Documentation.docx');

        end

        % Close request function: UIBase
        function UIBaseCloseRequest(app, event)
            % exit dragonsort after confirmation and cleanup

            msg = 'Exit DragonSort?';
            title = 'Confirm Exit';
            selection = uiconfirm(app.UIBase,msg,title,"Icon","warning");
            if strcmp(selection, 'OK')
                app.StatusLabel.Value = "Shutting down...";
                close all
                delete(app.initialisePop)
                delete(app.refinePop)
                delete(app.tagPop)
                delete(app)
            end

        end

        % Value changed function: OldField
        function OldFieldValueChanged(app, event)
            value = event.Value;
            for ii = 1:length(app.unitArray)
                app.unitArray(ii).refineSettings = event.PreviousValue*app.unitArray(ii).refineSettings/value;
            end
            app.t.add2UnitThr(1) = value;

        end

        % Value changed function: NewField
        function NewFieldValueChanged(app, event)
            value = app.NewField.Value;
            app.t.add2UnitThr(2) = value;

        end

        % Value changed function: SpikewidthEditField
        function SpikewidthEditFieldValueChanged(app, event)
            value = app.SpikewidthEditField.Value;
            if app.BatchsizeEditField.Value < value*2 + 1
                app.StatusLabel.Value = "Batch size cannot be smaller than twice the spike width!...";
                app.SpikewidthEditField.Value = app.m.spikeWidth;
                return
            end

            answer = uiconfirm(app.UIBase,"Changing spike width may result will result in the"+...
                " update of the entire sorting and may result in"+...
                " spike deletion & changes in sorting dynamics. Continue?","Warning",...
                'Icon','warning','DefaultOption',2);
            if strcmpi(answer, "CANCEL")
                return;
            end

            app.StatusLabel.Value = "Updating spike widths...";

            app.m.spikeWidth = value;
            app.updateSpikeWidth();

            standardUpdate(app);

        end

        % Value changed function: TemplatecropwidthEditField
        function TemplatecropwidthEditFieldValueChanged(app, event)
            value = app.TemplatecropwidthEditField.Value;
            app.t.templateCropFactor = value;

        end

        % Button pushed function: ShowsampleweightsButton
        function ShowsampleweightsButtonPushed(app, event)
            weightDesigner(app.t.deviationSampleWeights);

        end

        % Button pushed function: TMultiButton
        function TMultiButtonValueChanged(app, event)
            if size(app.xi,1) == 1
                return;
            end

            if isempty(app.dataAllChAx) || ~ishandle(app.dataAllChAx)
                app.dataAllChAx = makeTiledFigure(size(app.xi,1), [50 50 1700 600], 'Data trace multichannel', 'vertical');
                app.redrawTracePlot();
            else
                app.dataAllChAx.Visible = 'off';
                app.dataAllChAx.Visible = 'on';
            end

        end

        % Button pushed function: LMultiButton
        function LMultiButtonValueChanged(app, event)
            if size(app.xi,1) == 1
                return;
            end

            if isempty(app.leftUnitAllChAx) || ~ishandle(app.leftUnitAllChAx)
                app.leftUnitAllChAx = makeTiledFigure(size(app.xi,1), [50 550 1700 500], 'Left unit multichannel');
                app.redrawUnitPlots(1);
            else
                app.leftUnitAllChAx.Visible = 'off';
                app.leftUnitAllChAx.Visible = 'on';
            end

        end

        % Button pushed function: RMultiButton
        function RMultiButtonValueChanged(app, event)
            if size(app.xi,1) == 1
                return;
            end

            if isempty(app.rightUnitAllChAx) || ~ishandle(app.rightUnitAllChAx)
                app.rightUnitAllChAx = makeTiledFigure(size(app.xi,1), [50 550 1700 500], 'Right unit multichannel');
                app.redrawUnitPlots(2);
            else
                app.rightUnitAllChAx.Visible = 'off';
                app.rightUnitAllChAx.Visible = 'on';
            end

        end

        % Callback function: not associated with a component
        function TPCAButtonPushed(app, event)
            if isempty(app.dataFeatureAx) || ~ishandle(app.dataFeatureAx)
                dataFeatureSorter(app, app.unitArray);
            else
                app.dataFeatureAx.Visible = 'off';
                app.dataFeatureAx.Visible = 'on';
            end
        end

        % Value changed function: MainchannelDropDown
        function MainchannelDropDownValueChanged(app, event)
            answer = uiconfirm(app.UIBase,"Changing the main thresholding channel will result in the"+...
                " update of the entire sorting and may result in"+...
                " spike deletion & changes in sorting dynamics. Continue?","Warning",...
                'Icon','warning','DefaultOption',2);
            if strcmpi(answer, "CANCEL")
                return;
            end

            %             prompt = 'Number of samples within which a spike will be detected as the same spike';
            %             answer = inputdlg(prompt, 'Detect assigned spikes', [1 35]);

            app.StatusLabel.Value = "Updating main channel...";
            app.m.mainCh = str2double(app.MainchannelDropDown.Value);

            app.updateMainCh();

            standardUpdate(app);

        end

        % Value changed function: MetricDropDown_1, MetricDropDown_2, 
        % ...and 2 other components
        function MetricDropDownValueChanged(app, event)
            target = event.Source.UserData;
            app.redrawMetric(target);

        end

        % Menu selected function: ViewmetricsrowMenu
        function ViewmetricsrowMenuSelected(app, event)
            if ~event.Source.Checked
                app.MainGrid.RowHeight = {22,'1x','1x','1x'};
                event.Source.Checked = 1;
            else
                app.MainGrid.RowHeight = {22,'1x',0,'1x'};
                for ii = 2:length(app.Metrics.dropDownArr)
                    app.Metrics.dropDownArr(ii).Value = 'None';
                    app.redrawMetric(ii);
                end
                event.Source.Checked = 0;
            end
        end

        % Button pushed function: SwapButton
        function SwapButtonPushed(app, event)
            tempUnitName = app.LeftUnitDropDown.Value;
            app.LeftUnitDropDown.Value = app.RightUnitDropDown.Value;
            app.RightUnitDropDown.Value = tempUnitName;

            app.redrawUnitPlots();
            app.redrawMetric(find(~contains({app.Metrics.dropDownArr.Value},'(global)')));
            app.StatusLabel.Value = "Ready";
            app.addHistory();

        end

        % Menu selected function: SaveFiguresMenu
        function SaveFiguresMenuSelected(app, event)
            msg = 'Save which figures?';
            msgTitle = 'Save figures';
            toSave = uiconfirm(app.UIBase,msg,msgTitle,...
                'Options',{'All','Trace','Units','Metrics'},...
                'DefaultOption',1,'CancelOption',4);

            msg = 'Saved figure format?';
            msgTitle = 'Figure format';
            format = uiconfirm(app.UIBase,msg,msgTitle,...
                'Options',{'.pdf','.fig','Cancel'},...
                'DefaultOption',1,'CancelOption',3);

            if strcmpi(format, 'Cancel')
                return;
            end

            app.StatusLabel.Value = "Saving...";
            drawnow

            if app.savePath == 0
                app.savePath = app.m.fP;
            end
            sP = uigetdir(app.savePath,'Select save path');

            figure(app.UIBase);
            if sP == 0
                app.StatusLabel.Value = "Ready";
                return;
            end
            app.savePath = sP;

            if app.AddtimestampMenu.Checked
                timeStamp = "_"+datestr(now,'yymmddHHMM');
            else
                timeStamp = "";
            end
            pathTimeName = app.savePath+string(filesep)+app.SavenameEditField.Value+timeStamp;

            figH = [];
            figName = [];

            if strcmpi(toSave,'All') || strcmpi(toSave,'Units')
                figH = [figH, app.LPanel, app.RPanel];
                figName = [figName, "Unit"+app.LeftUnitDropDown.Value, "Unit"+app.RightUnitDropDown.Value];
            end
            if strcmpi(toSave,'All') || strcmpi(toSave,'Trace')
                figH = [figH, app.dataPanel];
                figName = [figName, "Data batch"+app.currentBatch];
            end
            if strcmpi(toSave,'All') || strcmpi(toSave,'Metrics')
                for ii = find(~contains({app.Metrics.dropDownArr.Value},'None'))
                    figH = [figH, app.Metrics.panelArr(ii)];
                    figName = [figName, app.Metrics.dropDownArr(ii).Value];
                end
            end

            for ii = 1:length(figH)
                sN = pathTimeName+figName(ii)+string(format);
                if strcmpi(format, '.pdf')
                    exportgraphics(figH(ii),sN,'ContentType','vector')
                else
                    tempFig = figure;
                    copyobj(figH(ii), tempFig)
                    savefig(tempFig, sN);
                    close(tempFig);
                end
                app.StatusLabel.Value = "Saved! (" + sN + ")";
            end

        end
    end

    % Component initialization
    methods (Access = private)

        % Create UIFigure and components
        function createComponents(app)

            % Create UIBase and hide until all components are created
            app.UIBase = uifigure('Visible', 'off');
            app.UIBase.Color = [0.9412 0.9412 0.9412];
            app.UIBase.Position = [50 50 1850 900];
            app.UIBase.Name = 'Dragonsort v0.3';
            app.UIBase.CloseRequestFcn = createCallbackFcn(app, @UIBaseCloseRequest, true);

            % Create SessionMenu
            app.SessionMenu = uimenu(app.UIBase);
            app.SessionMenu.Text = 'Session';

            % Create InitialiseMenu
            app.InitialiseMenu = uimenu(app.SessionMenu);
            app.InitialiseMenu.MenuSelectedFcn = createCallbackFcn(app, @InitialiseButtonPushed, true);
            app.InitialiseMenu.Accelerator = 'i';
            app.InitialiseMenu.Text = 'Initialise';

            % Create LoadMenu
            app.LoadMenu = uimenu(app.SessionMenu);
            app.LoadMenu.MenuSelectedFcn = createCallbackFcn(app, @LoadButtonPushed, true);
            app.LoadMenu.Accelerator = 'l';
            app.LoadMenu.Text = 'Load';

            % Create SaveMenu
            app.SaveMenu = uimenu(app.SessionMenu);
            app.SaveMenu.MenuSelectedFcn = createCallbackFcn(app, @SaveButtonPushed, true);
            app.SaveMenu.Accelerator = 's';
            app.SaveMenu.Text = 'Save';

            % Create SaveFiguresMenu
            app.SaveFiguresMenu = uimenu(app.SessionMenu);
            app.SaveFiguresMenu.MenuSelectedFcn = createCallbackFcn(app, @SaveFiguresMenuSelected, true);
            app.SaveFiguresMenu.Accelerator = '`';
            app.SaveFiguresMenu.Text = 'Save Figures';

            % Create AddtimestampMenu
            app.AddtimestampMenu = uimenu(app.SessionMenu);
            app.AddtimestampMenu.MenuSelectedFcn = createCallbackFcn(app, @AddtimestampMenuSelected, true);
            app.AddtimestampMenu.Checked = 'on';
            app.AddtimestampMenu.Text = 'Add timestamp to save';

            % Create UndoMenu
            app.UndoMenu = uimenu(app.SessionMenu);
            app.UndoMenu.MenuSelectedFcn = createCallbackFcn(app, @UndoMenuSelected, true);
            app.UndoMenu.Accelerator = 'z';
            app.UndoMenu.Text = 'Undo';

            % Create RedoMenu
            app.RedoMenu = uimenu(app.SessionMenu);
            app.RedoMenu.MenuSelectedFcn = createCallbackFcn(app, @UndoMenuSelected, true);
            app.RedoMenu.Accelerator = 'y';
            app.RedoMenu.Text = 'Redo';

            % Create PanelsMenu
            app.PanelsMenu = uimenu(app.UIBase);
            app.PanelsMenu.Text = 'Panels';

            % Create ViewmetricsrowMenu
            app.ViewmetricsrowMenu = uimenu(app.PanelsMenu);
            app.ViewmetricsrowMenu.MenuSelectedFcn = createCallbackFcn(app, @ViewmetricsrowMenuSelected, true);
            app.ViewmetricsrowMenu.Text = 'View metrics row';

            % Create LZoomMenu
            app.LZoomMenu = uimenu(app.PanelsMenu);
            app.LZoomMenu.MenuSelectedFcn = createCallbackFcn(app, @ZoomMenuSelected, true);
            app.LZoomMenu.Accelerator = '1';
            app.LZoomMenu.Text = 'Left unit: zoom';

            % Create LResetMenu
            app.LResetMenu = uimenu(app.PanelsMenu);
            app.LResetMenu.MenuSelectedFcn = createCallbackFcn(app, @LResetMenuSelected, true);
            app.LResetMenu.Accelerator = '2';
            app.LResetMenu.Text = 'Left unit: reset zoom';

            % Create LPanMenu
            app.LPanMenu = uimenu(app.PanelsMenu);
            app.LPanMenu.MenuSelectedFcn = createCallbackFcn(app, @PanMenuSelected, true);
            app.LPanMenu.Accelerator = '3';
            app.LPanMenu.Text = 'Left unit: pan';

            % Create LPointerMenu
            app.LPointerMenu = uimenu(app.PanelsMenu);
            app.LPointerMenu.MenuSelectedFcn = createCallbackFcn(app, @PointerMenuSelected, true);
            app.LPointerMenu.Accelerator = '4';
            app.LPointerMenu.Text = 'Left unit: pointer';

            % Create LUnselectMenu
            app.LUnselectMenu = uimenu(app.PanelsMenu);
            app.LUnselectMenu.MenuSelectedFcn = createCallbackFcn(app, @LUnselectMenuSelected, true);
            app.LUnselectMenu.Accelerator = '5';
            app.LUnselectMenu.Text = 'Left unit: unselect all';

            % Create TZoomMenu
            app.TZoomMenu = uimenu(app.PanelsMenu);
            app.TZoomMenu.MenuSelectedFcn = createCallbackFcn(app, @ZoomMenuSelected, true);
            app.TZoomMenu.Accelerator = 'q';
            app.TZoomMenu.Text = 'Trace: zoom';

            % Create TResetMenu
            app.TResetMenu = uimenu(app.PanelsMenu);
            app.TResetMenu.MenuSelectedFcn = createCallbackFcn(app, @TResetMenuSelected, true);
            app.TResetMenu.Accelerator = 'w';
            app.TResetMenu.Text = 'Trace: reset zoom';

            % Create TPanMenu
            app.TPanMenu = uimenu(app.PanelsMenu);
            app.TPanMenu.MenuSelectedFcn = createCallbackFcn(app, @PanMenuSelected, true);
            app.TPanMenu.Accelerator = 'e';
            app.TPanMenu.Text = 'Trace: pan';

            % Create TPointerMenu
            app.TPointerMenu = uimenu(app.PanelsMenu);
            app.TPointerMenu.MenuSelectedFcn = createCallbackFcn(app, @PointerMenuSelected, true);
            app.TPointerMenu.Accelerator = 'r';
            app.TPointerMenu.Text = 'Trace: pointer';

            % Create TUnselectMenu
            app.TUnselectMenu = uimenu(app.PanelsMenu);
            app.TUnselectMenu.MenuSelectedFcn = createCallbackFcn(app, @TUnselectMenuSelected, true);
            app.TUnselectMenu.Accelerator = 't';
            app.TUnselectMenu.Text = 'Trace: unselect all';

            % Create MatchunityaxisMenu
            app.MatchunityaxisMenu = uimenu(app.PanelsMenu);
            app.MatchunityaxisMenu.MenuSelectedFcn = createCallbackFcn(app, @MatchunityaxisMenuSelected, true);
            app.MatchunityaxisMenu.Accelerator = 'm';
            app.MatchunityaxisMenu.Text = 'Match unit Y-axis';

            % Create TimelineMenu
            app.TimelineMenu = uimenu(app.UIBase);
            app.TimelineMenu.Text = 'Timeline';

            % Create PreviousbatchMenu
            app.PreviousbatchMenu = uimenu(app.TimelineMenu);
            app.PreviousbatchMenu.MenuSelectedFcn = createCallbackFcn(app, @GotobatchButtonPushed, true);
            app.PreviousbatchMenu.Accelerator = 'o';
            app.PreviousbatchMenu.Text = 'Previous batch';

            % Create NextbatchMenu
            app.NextbatchMenu = uimenu(app.TimelineMenu);
            app.NextbatchMenu.MenuSelectedFcn = createCallbackFcn(app, @GotobatchButtonPushed, true);
            app.NextbatchMenu.Accelerator = 'p';
            app.NextbatchMenu.Text = 'Next batch';

            % Create UnitfrequencyMenu
            app.UnitfrequencyMenu = uimenu(app.TimelineMenu);
            app.UnitfrequencyMenu.Text = 'Show unit frequency time series';

            % Create ScrubthroughunitMenu
            app.ScrubthroughunitMenu = uimenu(app.TimelineMenu);
            app.ScrubthroughunitMenu.Text = 'Scrub through unit';

            % Create SortingMenu
            app.SortingMenu = uimenu(app.UIBase);
            app.SortingMenu.Text = 'Sorting';

            % Create NewunitMenu
            app.NewunitMenu = uimenu(app.SortingMenu);
            app.NewunitMenu.MenuSelectedFcn = createCallbackFcn(app, @NewunitButtonPushed, true);
            app.NewunitMenu.Accelerator = 'n';
            app.NewunitMenu.Text = 'New unit';

            % Create AddspikeMenu
            app.AddspikeMenu = uimenu(app.SortingMenu);
            app.AddspikeMenu.MenuSelectedFcn = createCallbackFcn(app, @AddspikeButtonPushed, true);
            app.AddspikeMenu.Accelerator = 'd';
            app.AddspikeMenu.Text = 'Add spike to left unit';

            % Create ForceaddMenu
            app.ForceaddMenu = uimenu(app.SortingMenu);
            app.ForceaddMenu.MenuSelectedFcn = createCallbackFcn(app, @AddspikeButtonPushed, true);
            app.ForceaddMenu.Accelerator = 'g';
            app.ForceaddMenu.Text = 'Force add spike to left unit';

            % Create RemovespikeMenu
            app.RemovespikeMenu = uimenu(app.SortingMenu);
            app.RemovespikeMenu.MenuSelectedFcn = createCallbackFcn(app, @basicopsButtonPushed, true);
            app.RemovespikeMenu.Accelerator = 'f';
            app.RemovespikeMenu.Text = 'Remove spike from left unit';

            % Create SplitMenu
            app.SplitMenu = uimenu(app.SortingMenu);
            app.SplitMenu.MenuSelectedFcn = createCallbackFcn(app, @basicopsButtonPushed, true);
            app.SplitMenu.Accelerator = 'v';
            app.SplitMenu.Text = 'Split left unit';

            % Create MergeMenu
            app.MergeMenu = uimenu(app.SortingMenu);
            app.MergeMenu.MenuSelectedFcn = createCallbackFcn(app, @basicopsButtonPushed, true);
            app.MergeMenu.Accelerator = 'c';
            app.MergeMenu.Text = 'Merge units';

            % Create AutosplitMenu
            app.AutosplitMenu = uimenu(app.SortingMenu);
            app.AutosplitMenu.MenuSelectedFcn = createCallbackFcn(app, @AutosplitButtonPushed, true);
            app.AutosplitMenu.Accelerator = 'a';
            app.AutosplitMenu.Text = 'Autosplit left unit';

            % Create AutomergeMenu
            app.AutomergeMenu = uimenu(app.SortingMenu);
            app.AutomergeMenu.Accelerator = 'b';
            app.AutomergeMenu.Text = 'Automerge left unit';

            % Create RefinebatchMenu
            app.RefinebatchMenu = uimenu(app.SortingMenu);
            app.RefinebatchMenu.MenuSelectedFcn = createCallbackFcn(app, @RefinebatchButtonPushed, true);
            app.RefinebatchMenu.Accelerator = 'x';
            app.RefinebatchMenu.Text = 'Refine batch';

            % Create OthersMenu
            app.OthersMenu = uimenu(app.UIBase);
            app.OthersMenu.Text = 'Others';

            % Create HelpMenu
            app.HelpMenu = uimenu(app.OthersMenu);
            app.HelpMenu.MenuSelectedFcn = createCallbackFcn(app, @HelpMenuSelected, true);
            app.HelpMenu.Accelerator = 'h';
            app.HelpMenu.Text = 'Help';

            % Create MainGrid
            app.MainGrid = uigridlayout(app.UIBase);
            app.MainGrid.ColumnWidth = {'1x', '1x', '1x', '1x', '1x', '1x', '1x', '1x', '1x'};
            app.MainGrid.RowHeight = {22, '1x', 0, '1x'};
            app.MainGrid.ColumnSpacing = 5;
            app.MainGrid.RowSpacing = 5;
            app.MainGrid.Padding = [5 5 5 5];

            % Create StatusLabel
            app.StatusLabel = uieditfield(app.MainGrid, 'text');
            app.StatusLabel.Editable = 'off';
            app.StatusLabel.FontColor = [1 1 1];
            app.StatusLabel.BackgroundColor = [0 0 0];
            app.StatusLabel.Layout.Row = 1;
            app.StatusLabel.Layout.Column = [1 5];
            app.StatusLabel.Value = 'Ready';

            % Create LGrid
            app.LGrid = uigridlayout(app.MainGrid);
            app.LGrid.ColumnWidth = {'1x'};
            app.LGrid.RowHeight = {22, '1x'};
            app.LGrid.ColumnSpacing = 2;
            app.LGrid.RowSpacing = 2;
            app.LGrid.Padding = [0 0 0 0];
            app.LGrid.Layout.Row = 2;
            app.LGrid.Layout.Column = [4 6];

            % Create LPanel
            app.LPanel = uipanel(app.LGrid);
            app.LPanel.BorderType = 'none';
            app.LPanel.Layout.Row = 2;
            app.LPanel.Layout.Column = 1;

            % Create LControlGrid
            app.LControlGrid = uigridlayout(app.LGrid);
            app.LControlGrid.ColumnWidth = {50, 50, '1x', 50};
            app.LControlGrid.RowHeight = {'1x'};
            app.LControlGrid.ColumnSpacing = 2;
            app.LControlGrid.RowSpacing = 2;
            app.LControlGrid.Padding = [0 0 0 0];
            app.LControlGrid.Layout.Row = 1;
            app.LControlGrid.Layout.Column = 1;

            % Create LeftUnitDropDown
            app.LeftUnitDropDown = uidropdown(app.LControlGrid);
            app.LeftUnitDropDown.Items = {'1'};
            app.LeftUnitDropDown.ValueChangedFcn = createCallbackFcn(app, @LeftUnitDropDownValueChanged, true);
            app.LeftUnitDropDown.FontWeight = 'bold';
            app.LeftUnitDropDown.Layout.Row = 1;
            app.LeftUnitDropDown.Layout.Column = 1;
            app.LeftUnitDropDown.Value = '1';

            % Create LTitle
            app.LTitle = uieditfield(app.LControlGrid, 'text');
            app.LTitle.Editable = 'off';
            app.LTitle.FontWeight = 'bold';
            app.LTitle.BackgroundColor = [0.8 0.8 0.8];
            app.LTitle.Layout.Row = 1;
            app.LTitle.Layout.Column = 3;

            % Create LMultiButton
            app.LMultiButton = uibutton(app.LControlGrid, 'push');
            app.LMultiButton.ButtonPushedFcn = createCallbackFcn(app, @LMultiButtonValueChanged, true);
            app.LMultiButton.Enable = 'off';
            app.LMultiButton.Layout.Row = 1;
            app.LMultiButton.Layout.Column = 2;
            app.LMultiButton.Text = 'Multi';

            % Create SwapButton
            app.SwapButton = uibutton(app.LControlGrid, 'push');
            app.SwapButton.ButtonPushedFcn = createCallbackFcn(app, @SwapButtonPushed, true);
            app.SwapButton.BackgroundColor = [0 0.4471 0.7412];
            app.SwapButton.Layout.Row = 1;
            app.SwapButton.Layout.Column = 4;
            app.SwapButton.Text = 'SWAP';

            % Create RGrid
            app.RGrid = uigridlayout(app.MainGrid);
            app.RGrid.ColumnWidth = {'1x'};
            app.RGrid.RowHeight = {22, '1x'};
            app.RGrid.ColumnSpacing = 2;
            app.RGrid.RowSpacing = 2;
            app.RGrid.Padding = [0 0 0 0];
            app.RGrid.Layout.Row = 2;
            app.RGrid.Layout.Column = [7 9];

            % Create RPanel
            app.RPanel = uipanel(app.RGrid);
            app.RPanel.BorderType = 'none';
            app.RPanel.Layout.Row = 2;
            app.RPanel.Layout.Column = 1;

            % Create RControlGrid
            app.RControlGrid = uigridlayout(app.RGrid);
            app.RControlGrid.ColumnWidth = {50, 50, '1x'};
            app.RControlGrid.RowHeight = {'1x'};
            app.RControlGrid.ColumnSpacing = 2;
            app.RControlGrid.RowSpacing = 2;
            app.RControlGrid.Padding = [0 0 0 0];
            app.RControlGrid.Layout.Row = 1;
            app.RControlGrid.Layout.Column = 1;

            % Create RightUnitDropDown
            app.RightUnitDropDown = uidropdown(app.RControlGrid);
            app.RightUnitDropDown.Items = {'1'};
            app.RightUnitDropDown.ValueChangedFcn = createCallbackFcn(app, @RightUnitDropDownValueChanged, true);
            app.RightUnitDropDown.FontWeight = 'bold';
            app.RightUnitDropDown.Layout.Row = 1;
            app.RightUnitDropDown.Layout.Column = 1;
            app.RightUnitDropDown.Value = '1';

            % Create RMultiButton
            app.RMultiButton = uibutton(app.RControlGrid, 'push');
            app.RMultiButton.ButtonPushedFcn = createCallbackFcn(app, @RMultiButtonValueChanged, true);
            app.RMultiButton.Enable = 'off';
            app.RMultiButton.Layout.Row = 1;
            app.RMultiButton.Layout.Column = 2;
            app.RMultiButton.Text = 'Multi';

            % Create RTitle
            app.RTitle = uieditfield(app.RControlGrid, 'text');
            app.RTitle.Editable = 'off';
            app.RTitle.FontWeight = 'bold';
            app.RTitle.BackgroundColor = [0.8 0.8 0.8];
            app.RTitle.Layout.Row = 1;
            app.RTitle.Layout.Column = 3;

            % Create ControlTabs
            app.ControlTabs = uitabgroup(app.MainGrid);
            app.ControlTabs.Layout.Row = 4;
            app.ControlTabs.Layout.Column = [1 2];

            % Create GeneralTab
            app.GeneralTab = uitab(app.ControlTabs);
            app.GeneralTab.Title = 'General';

            % Create GeneralGrid
            app.GeneralGrid = uigridlayout(app.GeneralTab);
            app.GeneralGrid.ColumnWidth = {'0.6x', '1x'};
            app.GeneralGrid.RowHeight = {'1x', '0.4x'};
            app.GeneralGrid.ColumnSpacing = 5;
            app.GeneralGrid.RowSpacing = 5;
            app.GeneralGrid.Padding = [3 3 3 3];

            % Create DatascrubGrid
            app.DatascrubGrid = uigridlayout(app.GeneralGrid);
            app.DatascrubGrid.RowHeight = {20, '1x', '1x', '1x', '1x', '1x'};
            app.DatascrubGrid.ColumnSpacing = 2;
            app.DatascrubGrid.RowSpacing = 2;
            app.DatascrubGrid.Padding = [0 0 0 0];
            app.DatascrubGrid.Layout.Row = 1;
            app.DatascrubGrid.Layout.Column = 1;

            % Create ScrubdataLabel
            app.ScrubdataLabel = uilabel(app.DatascrubGrid);
            app.ScrubdataLabel.HorizontalAlignment = 'center';
            app.ScrubdataLabel.FontWeight = 'bold';
            app.ScrubdataLabel.Layout.Row = 1;
            app.ScrubdataLabel.Layout.Column = [1 2];
            app.ScrubdataLabel.Text = 'Scrub data';

            % Create PreviousbatchButton
            app.PreviousbatchButton = uibutton(app.DatascrubGrid, 'push');
            app.PreviousbatchButton.ButtonPushedFcn = createCallbackFcn(app, @GotobatchButtonPushed, true);
            app.PreviousbatchButton.BackgroundColor = [1 0.4118 0.1608];
            app.PreviousbatchButton.Layout.Row = 2;
            app.PreviousbatchButton.Layout.Column = 1;
            app.PreviousbatchButton.Text = 'Prev (O)';

            % Create NextbatchButton
            app.NextbatchButton = uibutton(app.DatascrubGrid, 'push');
            app.NextbatchButton.ButtonPushedFcn = createCallbackFcn(app, @GotobatchButtonPushed, true);
            app.NextbatchButton.BackgroundColor = [1 0.4118 0.1608];
            app.NextbatchButton.Layout.Row = 2;
            app.NextbatchButton.Layout.Column = 2;
            app.NextbatchButton.Text = 'Next (P)';

            % Create AutosortButton
            app.AutosortButton = uibutton(app.DatascrubGrid, 'push');
            app.AutosortButton.ButtonPushedFcn = createCallbackFcn(app, @AutosortButtonPushed, true);
            app.AutosortButton.WordWrap = 'on';
            app.AutosortButton.BackgroundColor = [1 0.4118 0.1608];
            app.AutosortButton.Layout.Row = 4;
            app.AutosortButton.Layout.Column = 1;
            app.AutosortButton.Text = 'Autosort to:';

            % Create uptoField
            app.uptoField = uieditfield(app.DatascrubGrid, 'numeric');
            app.uptoField.Limits = [1 Inf];
            app.uptoField.RoundFractionalValues = 'on';
            app.uptoField.HorizontalAlignment = 'center';
            app.uptoField.Layout.Row = 4;
            app.uptoField.Layout.Column = 2;
            app.uptoField.Value = 1;

            % Create AutosortbatchButton
            app.AutosortbatchButton = uibutton(app.DatascrubGrid, 'push');
            app.AutosortbatchButton.ButtonPushedFcn = createCallbackFcn(app, @AutosortButtonPushed, true);
            app.AutosortbatchButton.BackgroundColor = [0.9882 0.6431 0.1569];
            app.AutosortbatchButton.Layout.Row = 5;
            app.AutosortbatchButton.Layout.Column = [1 2];
            app.AutosortbatchButton.Text = 'Autosort batch';

            % Create RefinebatchButton
            app.RefinebatchButton = uibutton(app.DatascrubGrid, 'push');
            app.RefinebatchButton.ButtonPushedFcn = createCallbackFcn(app, @RefinebatchButtonPushed, true);
            app.RefinebatchButton.BackgroundColor = [0.8902 0.5569 0.0902];
            app.RefinebatchButton.Layout.Row = 6;
            app.RefinebatchButton.Layout.Column = [1 2];
            app.RefinebatchButton.Text = 'Refine batch (X)';

            % Create GotobatchButton
            app.GotobatchButton = uibutton(app.DatascrubGrid, 'push');
            app.GotobatchButton.ButtonPushedFcn = createCallbackFcn(app, @GotobatchButtonPushed, true);
            app.GotobatchButton.WordWrap = 'on';
            app.GotobatchButton.BackgroundColor = [1 0.4118 0.1608];
            app.GotobatchButton.Layout.Row = 3;
            app.GotobatchButton.Layout.Column = 1;
            app.GotobatchButton.Text = 'Go to batch:';

            % Create GotobatchField
            app.GotobatchField = uieditfield(app.DatascrubGrid, 'numeric');
            app.GotobatchField.Limits = [1 Inf];
            app.GotobatchField.RoundFractionalValues = 'on';
            app.GotobatchField.HorizontalAlignment = 'center';
            app.GotobatchField.Layout.Row = 3;
            app.GotobatchField.Layout.Column = 2;
            app.GotobatchField.Value = 1;

            % Create ManipulationGrid
            app.ManipulationGrid = uigridlayout(app.GeneralGrid);
            app.ManipulationGrid.RowHeight = {20, '1x', '1x', 5, '1x', '1x', '1x', '1x', '1x'};
            app.ManipulationGrid.ColumnSpacing = 2;
            app.ManipulationGrid.RowSpacing = 2;
            app.ManipulationGrid.Padding = [0 0 0 0];
            app.ManipulationGrid.Layout.Row = 1;
            app.ManipulationGrid.Layout.Column = 2;

            % Create UnitmanipulationLabel
            app.UnitmanipulationLabel = uilabel(app.ManipulationGrid);
            app.UnitmanipulationLabel.HorizontalAlignment = 'center';
            app.UnitmanipulationLabel.FontWeight = 'bold';
            app.UnitmanipulationLabel.Layout.Row = 1;
            app.UnitmanipulationLabel.Layout.Column = [1 2];
            app.UnitmanipulationLabel.Text = 'Unit manipulation';

            % Create DeleteunitButton
            app.DeleteunitButton = uibutton(app.ManipulationGrid, 'push');
            app.DeleteunitButton.ButtonPushedFcn = createCallbackFcn(app, @DeleteunitButtonPushed, true);
            app.DeleteunitButton.BackgroundColor = [0.3922 0.8314 0.0745];
            app.DeleteunitButton.Layout.Row = 2;
            app.DeleteunitButton.Layout.Column = 2;
            app.DeleteunitButton.Text = 'Delete unit';

            % Create AddspikeButton
            app.AddspikeButton = uibutton(app.ManipulationGrid, 'push');
            app.AddspikeButton.ButtonPushedFcn = createCallbackFcn(app, @AddspikeButtonPushed, true);
            app.AddspikeButton.BackgroundColor = [0.0392 0.4706 0.7608];
            app.AddspikeButton.Layout.Row = 3;
            app.AddspikeButton.Layout.Column = 1;
            app.AddspikeButton.Text = 'Add spike (D)';

            % Create RemovespikeButton
            app.RemovespikeButton = uibutton(app.ManipulationGrid, 'push');
            app.RemovespikeButton.ButtonPushedFcn = createCallbackFcn(app, @basicopsButtonPushed, true);
            app.RemovespikeButton.BackgroundColor = [0.0745 0.6235 1];
            app.RemovespikeButton.FontSize = 11.5;
            app.RemovespikeButton.Layout.Row = 5;
            app.RemovespikeButton.Layout.Column = 1;
            app.RemovespikeButton.Text = 'Remove spike (F)';

            % Create SplitButton
            app.SplitButton = uibutton(app.ManipulationGrid, 'push');
            app.SplitButton.ButtonPushedFcn = createCallbackFcn(app, @basicopsButtonPushed, true);
            app.SplitButton.BackgroundColor = [0.0745 0.6235 1];
            app.SplitButton.Layout.Row = 6;
            app.SplitButton.Layout.Column = 1;
            app.SplitButton.Text = 'Split unit (C)';

            % Create NewunitButton
            app.NewunitButton = uibutton(app.ManipulationGrid, 'push');
            app.NewunitButton.ButtonPushedFcn = createCallbackFcn(app, @NewunitButtonPushed, true);
            app.NewunitButton.BackgroundColor = [0.3922 0.8314 0.0745];
            app.NewunitButton.Layout.Row = 2;
            app.NewunitButton.Layout.Column = 1;
            app.NewunitButton.Text = 'New unit (N)';

            % Create ForceaddButton
            app.ForceaddButton = uibutton(app.ManipulationGrid, 'push');
            app.ForceaddButton.ButtonPushedFcn = createCallbackFcn(app, @AddspikeButtonPushed, true);
            app.ForceaddButton.BackgroundColor = [0 0.4471 0.7412];
            app.ForceaddButton.Layout.Row = 3;
            app.ForceaddButton.Layout.Column = 2;
            app.ForceaddButton.Text = 'Force add (G)';

            % Create MergeButton
            app.MergeButton = uibutton(app.ManipulationGrid, 'push');
            app.MergeButton.ButtonPushedFcn = createCallbackFcn(app, @basicopsButtonPushed, true);
            app.MergeButton.BackgroundColor = [0.0745 0.6235 1];
            app.MergeButton.Layout.Row = 7;
            app.MergeButton.Layout.Column = 1;
            app.MergeButton.Text = 'Merge units (V)';

            % Create AutosplitButton
            app.AutosplitButton = uibutton(app.ManipulationGrid, 'push');
            app.AutosplitButton.ButtonPushedFcn = createCallbackFcn(app, @AutosplitButtonPushed, true);
            app.AutosplitButton.BackgroundColor = [0.8784 0.8784 0.1137];
            app.AutosplitButton.Layout.Row = 8;
            app.AutosplitButton.Layout.Column = 1;
            app.AutosplitButton.Text = 'Autosplit (A):';

            % Create AutomergeButton
            app.AutomergeButton = uibutton(app.ManipulationGrid, 'push');
            app.AutomergeButton.ButtonPushedFcn = createCallbackFcn(app, @AutomergeButtonPushed, true);
            app.AutomergeButton.BackgroundColor = [0.8784 0.8784 0.1137];
            app.AutomergeButton.Layout.Row = 9;
            app.AutomergeButton.Layout.Column = 1;
            app.AutomergeButton.Text = 'Automerge';

            % Create OperationTargetPanel
            app.OperationTargetPanel = uipanel(app.ManipulationGrid);
            app.OperationTargetPanel.TitlePosition = 'centertop';
            app.OperationTargetPanel.Title = 'Operation Target';
            app.OperationTargetPanel.Layout.Row = [5 9];
            app.OperationTargetPanel.Layout.Column = 2;

            % Create OperationtargetGrid
            app.OperationtargetGrid = uigridlayout(app.OperationTargetPanel);
            app.OperationtargetGrid.ColumnWidth = {'1x', '0.3x'};
            app.OperationtargetGrid.RowHeight = {'1x', '1x', '1x', '1x'};
            app.OperationtargetGrid.ColumnSpacing = 2;
            app.OperationtargetGrid.RowSpacing = 2;
            app.OperationtargetGrid.Padding = [1 1 1 1];

            % Create SelectedButton
            app.SelectedButton = uibutton(app.OperationtargetGrid, 'state');
            app.SelectedButton.Text = 'Selected';
            app.SelectedButton.Layout.Row = 1;
            app.SelectedButton.Layout.Column = [1 2];
            app.SelectedButton.Value = true;

            % Create PlottedButton
            app.PlottedButton = uibutton(app.OperationtargetGrid, 'state');
            app.PlottedButton.Text = 'Plotted';
            app.PlottedButton.Layout.Row = 2;
            app.PlottedButton.Layout.Column = [1 2];

            % Create BatchButton
            app.BatchButton = uibutton(app.OperationtargetGrid, 'state');
            app.BatchButton.Text = 'Batch';
            app.BatchButton.Layout.Row = 3;
            app.BatchButton.Layout.Column = [1 2];

            % Create AutosplitField
            app.AutosplitField = uieditfield(app.OperationtargetGrid, 'numeric');
            app.AutosplitField.Limits = [1 Inf];
            app.AutosplitField.RoundFractionalValues = 'on';
            app.AutosplitField.HorizontalAlignment = 'center';
            app.AutosplitField.Layout.Row = 4;
            app.AutosplitField.Layout.Column = 2;
            app.AutosplitField.Value = 3;

            % Create AutosplitintoLabel
            app.AutosplitintoLabel = uilabel(app.OperationtargetGrid);
            app.AutosplitintoLabel.HorizontalAlignment = 'center';
            app.AutosplitintoLabel.Layout.Row = 4;
            app.AutosplitintoLabel.Layout.Column = 1;
            app.AutosplitintoLabel.Text = 'Autosplit into:';

            % Create MiscGrid
            app.MiscGrid = uigridlayout(app.GeneralGrid);
            app.MiscGrid.ColumnWidth = {'1x', '1x', '1x'};
            app.MiscGrid.RowHeight = {20, '1x', '1x', '1x', '1x'};
            app.MiscGrid.ColumnSpacing = 2;
            app.MiscGrid.RowSpacing = 2;
            app.MiscGrid.Padding = [0 0 0 0];
            app.MiscGrid.Layout.Row = 2;
            app.MiscGrid.Layout.Column = [1 2];

            % Create AccessoryfunctionsLabel
            app.AccessoryfunctionsLabel = uilabel(app.MiscGrid);
            app.AccessoryfunctionsLabel.HorizontalAlignment = 'center';
            app.AccessoryfunctionsLabel.FontWeight = 'bold';
            app.AccessoryfunctionsLabel.Layout.Row = 1;
            app.AccessoryfunctionsLabel.Layout.Column = [1 3];
            app.AccessoryfunctionsLabel.Text = 'Accessory functions';

            % Create AutocreateunitsButton
            app.AutocreateunitsButton = uibutton(app.MiscGrid, 'push');
            app.AutocreateunitsButton.ButtonPushedFcn = createCallbackFcn(app, @AutocreateunitsButtonPushed, true);
            app.AutocreateunitsButton.BackgroundColor = [0.7176 0.2745 1];
            app.AutocreateunitsButton.Layout.Row = [2 3];
            app.AutocreateunitsButton.Layout.Column = 1;
            app.AutocreateunitsButton.Text = 'Autocreate units';

            % Create CleanupButton
            app.CleanupButton = uibutton(app.MiscGrid, 'push');
            app.CleanupButton.ButtonPushedFcn = createCallbackFcn(app, @CleanupButtonPushed, true);
            app.CleanupButton.BackgroundColor = [0.851 0.2824 0.7373];
            app.CleanupButton.Layout.Row = [4 5];
            app.CleanupButton.Layout.Column = 1;
            app.CleanupButton.Text = 'Renumber units';

            % Create OverviewDropDown
            app.OverviewDropDown = uidropdown(app.MiscGrid);
            app.OverviewDropDown.Items = {'Waveforms', 'Deviation', 'PCA', 'LDA', 'X-correlogram'};
            app.OverviewDropDown.Layout.Row = [4 5];
            app.OverviewDropDown.Layout.Column = 2;
            app.OverviewDropDown.Value = 'Waveforms';

            % Create AllOverviewButton
            app.AllOverviewButton = uibutton(app.MiscGrid, 'push');
            app.AllOverviewButton.ButtonPushedFcn = createCallbackFcn(app, @AllOverviewButtonButtonPushed, true);
            app.AllOverviewButton.BackgroundColor = [0.0588 1 1];
            app.AllOverviewButton.Layout.Row = [2 3];
            app.AllOverviewButton.Layout.Column = 2;
            app.AllOverviewButton.Text = 'Popout Figures';

            % Create ParametersdataTab
            app.ParametersdataTab = uitab(app.ControlTabs);
            app.ParametersdataTab.Title = 'Parameters & Data';

            % Create ParametersGrid
            app.ParametersGrid = uigridlayout(app.ParametersdataTab);
            app.ParametersGrid.RowHeight = {45, '2x', '0.8x', '0.7x'};
            app.ParametersGrid.ColumnSpacing = 5;
            app.ParametersGrid.RowSpacing = 5;
            app.ParametersGrid.Padding = [3 3 3 3];

            % Create ViewingGrid
            app.ViewingGrid = uigridlayout(app.ParametersGrid);
            app.ViewingGrid.RowHeight = {20, '1x', '1x', '1x', '1x', '0.5x', '0.5x'};
            app.ViewingGrid.ColumnSpacing = 2;
            app.ViewingGrid.RowSpacing = 2;
            app.ViewingGrid.Padding = [0 0 0 0];
            app.ViewingGrid.Layout.Row = [2 4];
            app.ViewingGrid.Layout.Column = 2;

            % Create SpikestotalLabel
            app.SpikestotalLabel = uilabel(app.ViewingGrid);
            app.SpikestotalLabel.HorizontalAlignment = 'right';
            app.SpikestotalLabel.Layout.Row = 4;
            app.SpikestotalLabel.Layout.Column = 1;
            app.SpikestotalLabel.Text = '# Spikes total';

            % Create SpikeshownField
            app.SpikeshownField = uieditfield(app.ViewingGrid, 'numeric');
            app.SpikeshownField.Limits = [0 Inf];
            app.SpikeshownField.RoundFractionalValues = 'on';
            app.SpikeshownField.ValueChangedFcn = createCallbackFcn(app, @SpikeshownFieldValueChanged, true);
            app.SpikeshownField.Layout.Row = 4;
            app.SpikeshownField.Layout.Column = 2;
            app.SpikeshownField.Value = 500;

            % Create PastbatchesLabel
            app.PastbatchesLabel = uilabel(app.ViewingGrid);
            app.PastbatchesLabel.HorizontalAlignment = 'right';
            app.PastbatchesLabel.Layout.Row = 2;
            app.PastbatchesLabel.Layout.Column = 1;
            app.PastbatchesLabel.Text = 'Past batches';

            % Create PastbatchesField
            app.PastbatchesField = uieditfield(app.ViewingGrid, 'numeric');
            app.PastbatchesField.Limits = [0 Inf];
            app.PastbatchesField.RoundFractionalValues = 'on';
            app.PastbatchesField.ValueChangedFcn = createCallbackFcn(app, @DrawnbatchesChanged, true);
            app.PastbatchesField.Layout.Row = 2;
            app.PastbatchesField.Layout.Column = 2;
            app.PastbatchesField.Value = 3;

            % Create DataviewingLabel
            app.DataviewingLabel = uilabel(app.ViewingGrid);
            app.DataviewingLabel.HorizontalAlignment = 'center';
            app.DataviewingLabel.FontWeight = 'bold';
            app.DataviewingLabel.Layout.Row = 1;
            app.DataviewingLabel.Layout.Column = [1 2];
            app.DataviewingLabel.Text = 'Data viewing';

            % Create FuturebatchesLabel
            app.FuturebatchesLabel = uilabel(app.ViewingGrid);
            app.FuturebatchesLabel.HorizontalAlignment = 'right';
            app.FuturebatchesLabel.Layout.Row = 3;
            app.FuturebatchesLabel.Layout.Column = 1;
            app.FuturebatchesLabel.Text = 'Future batches';

            % Create FuturebatchesField
            app.FuturebatchesField = uieditfield(app.ViewingGrid, 'numeric');
            app.FuturebatchesField.Limits = [0 Inf];
            app.FuturebatchesField.RoundFractionalValues = 'on';
            app.FuturebatchesField.ValueChangedFcn = createCallbackFcn(app, @DrawnbatchesChanged, true);
            app.FuturebatchesField.Layout.Row = 3;
            app.FuturebatchesField.Layout.Column = 2;

            % Create YlimitLabel
            app.YlimitLabel = uilabel(app.ViewingGrid);
            app.YlimitLabel.HorizontalAlignment = 'right';
            app.YlimitLabel.Layout.Row = [6 7];
            app.YlimitLabel.Layout.Column = 1;
            app.YlimitLabel.Text = 'Y-limit';

            % Create yLimLowField
            app.yLimLowField = uieditfield(app.ViewingGrid, 'numeric');
            app.yLimLowField.ValueChangedFcn = createCallbackFcn(app, @yLimLowFieldValueChanged, true);
            app.yLimLowField.Layout.Row = 7;
            app.yLimLowField.Layout.Column = 2;
            app.yLimLowField.Value = -Inf;

            % Create BatchSizesamplesLabel
            app.BatchSizesamplesLabel = uilabel(app.ViewingGrid);
            app.BatchSizesamplesLabel.HorizontalAlignment = 'right';
            app.BatchSizesamplesLabel.Layout.Row = 5;
            app.BatchSizesamplesLabel.Layout.Column = 1;
            app.BatchSizesamplesLabel.Text = {'Batch Size'; '(samples)'};

            % Create BatchsizeEditField
            app.BatchsizeEditField = uieditfield(app.ViewingGrid, 'numeric');
            app.BatchsizeEditField.Limits = [1000 100000000];
            app.BatchsizeEditField.RoundFractionalValues = 'on';
            app.BatchsizeEditField.ValueChangedFcn = createCallbackFcn(app, @BatchsizeEditFieldValueChanged, true);
            app.BatchsizeEditField.Layout.Row = 5;
            app.BatchsizeEditField.Layout.Column = 2;
            app.BatchsizeEditField.Value = 5000000;

            % Create yLimHighField
            app.yLimHighField = uieditfield(app.ViewingGrid, 'numeric');
            app.yLimHighField.ValueChangedFcn = createCallbackFcn(app, @yLimLowFieldValueChanged, true);
            app.yLimHighField.Layout.Row = 6;
            app.yLimHighField.Layout.Column = 2;
            app.yLimHighField.Value = Inf;

            % Create ThresholdsGrid
            app.ThresholdsGrid = uigridlayout(app.ParametersGrid);
            app.ThresholdsGrid.RowHeight = {20, '1x', '1x', '1x', '1x', '1x', '1x', '1x'};
            app.ThresholdsGrid.ColumnSpacing = 2;
            app.ThresholdsGrid.RowSpacing = 2;
            app.ThresholdsGrid.Padding = [0 0 0 0];
            app.ThresholdsGrid.Layout.Row = 2;
            app.ThresholdsGrid.Layout.Column = 1;

            % Create ThresholdsLabel
            app.ThresholdsLabel = uilabel(app.ThresholdsGrid);
            app.ThresholdsLabel.HorizontalAlignment = 'center';
            app.ThresholdsLabel.FontWeight = 'bold';
            app.ThresholdsLabel.Layout.Row = 1;
            app.ThresholdsLabel.Layout.Column = [1 2];
            app.ThresholdsLabel.Text = 'Deviation thresholding';

            % Create ExistingunitsLabel
            app.ExistingunitsLabel = uilabel(app.ThresholdsGrid);
            app.ExistingunitsLabel.HorizontalAlignment = 'right';
            app.ExistingunitsLabel.Layout.Row = 2;
            app.ExistingunitsLabel.Layout.Column = 1;
            app.ExistingunitsLabel.Text = 'Existing units';

            % Create OldField
            app.OldField = uieditfield(app.ThresholdsGrid, 'numeric');
            app.OldField.Limits = [0 Inf];
            app.OldField.ValueChangedFcn = createCallbackFcn(app, @OldFieldValueChanged, true);
            app.OldField.Layout.Row = 2;
            app.OldField.Layout.Column = 2;
            app.OldField.Value = 1;

            % Create NewField
            app.NewField = uieditfield(app.ThresholdsGrid, 'numeric');
            app.NewField.Limits = [0 Inf];
            app.NewField.ValueChangedFcn = createCallbackFcn(app, @NewFieldValueChanged, true);
            app.NewField.Layout.Row = 3;
            app.NewField.Layout.Column = 2;
            app.NewField.Value = 1;

            % Create NewunitsLabel
            app.NewunitsLabel = uilabel(app.ThresholdsGrid);
            app.NewunitsLabel.HorizontalAlignment = 'right';
            app.NewunitsLabel.Layout.Row = 3;
            app.NewunitsLabel.Layout.Column = 1;
            app.NewunitsLabel.Text = 'New units';

            % Create AmplitudelimitsLabel
            app.AmplitudelimitsLabel = uilabel(app.ThresholdsGrid);
            app.AmplitudelimitsLabel.HorizontalAlignment = 'right';
            app.AmplitudelimitsLabel.Layout.Row = [6 7];
            app.AmplitudelimitsLabel.Layout.Column = 1;
            app.AmplitudelimitsLabel.Text = 'Amplitude limits';

            % Create DetectThr1EditField
            app.DetectThr1EditField = uieditfield(app.ThresholdsGrid, 'numeric');
            app.DetectThr1EditField.ValueChangedFcn = createCallbackFcn(app, @DetectThrChanged, true);
            app.DetectThr1EditField.Layout.Row = 7;
            app.DetectThr1EditField.Layout.Column = 2;

            % Create FuzzyButton
            app.FuzzyButton = uibutton(app.ThresholdsGrid, 'state');
            app.FuzzyButton.Text = 'Fuzzy deviation';
            app.FuzzyButton.BackgroundColor = [0.9412 0.9412 0.9412];
            app.FuzzyButton.Layout.Row = 4;
            app.FuzzyButton.Layout.Column = [1 2];
            app.FuzzyButton.Value = true;

            % Create DetectThr2EditField
            app.DetectThr2EditField = uieditfield(app.ThresholdsGrid, 'numeric');
            app.DetectThr2EditField.ValueChangedFcn = createCallbackFcn(app, @DetectThrChanged, true);
            app.DetectThr2EditField.Layout.Row = 6;
            app.DetectThr2EditField.Layout.Column = 2;

            % Create SpikeLabel
            app.SpikeLabel = uilabel(app.ThresholdsGrid);
            app.SpikeLabel.HorizontalAlignment = 'center';
            app.SpikeLabel.FontWeight = 'bold';
            app.SpikeLabel.Layout.Row = 5;
            app.SpikeLabel.Layout.Column = [1 2];
            app.SpikeLabel.Text = 'Spike detection';

            % Create FuzzyDetButton
            app.FuzzyDetButton = uibutton(app.ThresholdsGrid, 'state');
            app.FuzzyDetButton.ValueChangedFcn = createCallbackFcn(app, @FuzzyDetButtonValueChanged, true);
            app.FuzzyDetButton.Text = 'Fuzzy detection';
            app.FuzzyDetButton.BackgroundColor = [0.9412 0.9412 0.9412];
            app.FuzzyDetButton.Layout.Row = 8;
            app.FuzzyDetButton.Layout.Column = [1 2];
            app.FuzzyDetButton.Value = true;

            % Create InfoGrid
            app.InfoGrid = uigridlayout(app.ParametersGrid);
            app.InfoGrid.ColumnWidth = {60, '1x', '0.15x'};
            app.InfoGrid.ColumnSpacing = 2;
            app.InfoGrid.RowSpacing = 2;
            app.InfoGrid.Padding = [0 0 0 0];
            app.InfoGrid.Layout.Row = 1;
            app.InfoGrid.Layout.Column = [1 2];

            % Create BinaryEditField
            app.BinaryEditField = uieditfield(app.InfoGrid, 'text');
            app.BinaryEditField.Editable = 'off';
            app.BinaryEditField.Layout.Row = 1;
            app.BinaryEditField.Layout.Column = 2;

            % Create BinaryEditFieldLabel
            app.BinaryEditFieldLabel = uilabel(app.InfoGrid);
            app.BinaryEditFieldLabel.HorizontalAlignment = 'right';
            app.BinaryEditFieldLabel.Layout.Row = 1;
            app.BinaryEditFieldLabel.Layout.Column = 1;
            app.BinaryEditFieldLabel.Text = 'Binary';

            % Create SavenameEditFieldLabel
            app.SavenameEditFieldLabel = uilabel(app.InfoGrid);
            app.SavenameEditFieldLabel.HorizontalAlignment = 'right';
            app.SavenameEditFieldLabel.Layout.Row = 2;
            app.SavenameEditFieldLabel.Layout.Column = 1;
            app.SavenameEditFieldLabel.Text = 'Savename';

            % Create SavenameEditField
            app.SavenameEditField = uieditfield(app.InfoGrid, 'text');
            app.SavenameEditField.Layout.Row = 2;
            app.SavenameEditField.Layout.Column = 2;

            % Create BinarynamecopyButton
            app.BinarynamecopyButton = uibutton(app.InfoGrid, 'push');
            app.BinarynamecopyButton.ButtonPushedFcn = createCallbackFcn(app, @BinarynamecopyButtonPushed, true);
            app.BinarynamecopyButton.Layout.Row = 1;
            app.BinarynamecopyButton.Layout.Column = 3;
            app.BinarynamecopyButton.Text = 'Copy';

            % Create SavenamecopyButton
            app.SavenamecopyButton = uibutton(app.InfoGrid, 'push');
            app.SavenamecopyButton.ButtonPushedFcn = createCallbackFcn(app, @SavenamecopyButtonPushed, true);
            app.SavenamecopyButton.Layout.Row = 2;
            app.SavenamecopyButton.Layout.Column = 3;
            app.SavenamecopyButton.Text = 'Copy';

            % Create TemplategenerateionGrid
            app.TemplategenerateionGrid = uigridlayout(app.ParametersGrid);
            app.TemplategenerateionGrid.RowHeight = {20, '1x', '1x', '1x', '1x'};
            app.TemplategenerateionGrid.ColumnSpacing = 2;
            app.TemplategenerateionGrid.RowSpacing = 2;
            app.TemplategenerateionGrid.Padding = [0 0 0 0];
            app.TemplategenerateionGrid.Layout.Row = [3 4];
            app.TemplategenerateionGrid.Layout.Column = 1;

            % Create FuturebatchesLabel_2
            app.FuturebatchesLabel_2 = uilabel(app.TemplategenerateionGrid);
            app.FuturebatchesLabel_2.HorizontalAlignment = 'right';
            app.FuturebatchesLabel_2.Layout.Row = 3;
            app.FuturebatchesLabel_2.Layout.Column = 1;
            app.FuturebatchesLabel_2.Text = 'Future batches';

            % Create FuturebatchesTField
            app.FuturebatchesTField = uieditfield(app.TemplategenerateionGrid, 'numeric');
            app.FuturebatchesTField.Limits = [0 Inf];
            app.FuturebatchesTField.RoundFractionalValues = 'on';
            app.FuturebatchesTField.Layout.Row = 3;
            app.FuturebatchesTField.Layout.Column = 2;

            % Create SpikestotalEditFieldLabel
            app.SpikestotalEditFieldLabel = uilabel(app.TemplategenerateionGrid);
            app.SpikestotalEditFieldLabel.HorizontalAlignment = 'right';
            app.SpikestotalEditFieldLabel.Layout.Row = 4;
            app.SpikestotalEditFieldLabel.Layout.Column = 1;
            app.SpikestotalEditFieldLabel.Text = '# Spikes total';

            % Create SpikesusedEditField
            app.SpikesusedEditField = uieditfield(app.TemplategenerateionGrid, 'numeric');
            app.SpikesusedEditField.Limits = [10 Inf];
            app.SpikesusedEditField.RoundFractionalValues = 'on';
            app.SpikesusedEditField.Layout.Row = 4;
            app.SpikesusedEditField.Layout.Column = 2;
            app.SpikesusedEditField.Value = 60;

            % Create PastbatchesLabel_2
            app.PastbatchesLabel_2 = uilabel(app.TemplategenerateionGrid);
            app.PastbatchesLabel_2.HorizontalAlignment = 'right';
            app.PastbatchesLabel_2.Layout.Row = 2;
            app.PastbatchesLabel_2.Layout.Column = 1;
            app.PastbatchesLabel_2.Text = 'Past batches';

            % Create PastbatchesTField
            app.PastbatchesTField = uieditfield(app.TemplategenerateionGrid, 'numeric');
            app.PastbatchesTField.Limits = [0 Inf];
            app.PastbatchesTField.RoundFractionalValues = 'on';
            app.PastbatchesTField.Layout.Row = 2;
            app.PastbatchesTField.Layout.Column = 2;
            app.PastbatchesTField.Value = 2;

            % Create TemplategenerationLabel
            app.TemplategenerationLabel = uilabel(app.TemplategenerateionGrid);
            app.TemplategenerationLabel.HorizontalAlignment = 'center';
            app.TemplategenerationLabel.FontWeight = 'bold';
            app.TemplategenerationLabel.Layout.Row = 1;
            app.TemplategenerationLabel.Layout.Column = [1 2];
            app.TemplategenerationLabel.Text = 'Template generation';

            % Create TemplatewidthcropfactorLabel
            app.TemplatewidthcropfactorLabel = uilabel(app.TemplategenerateionGrid);
            app.TemplatewidthcropfactorLabel.HorizontalAlignment = 'right';
            app.TemplatewidthcropfactorLabel.WordWrap = 'on';
            app.TemplatewidthcropfactorLabel.Layout.Row = 5;
            app.TemplatewidthcropfactorLabel.Layout.Column = 1;
            app.TemplatewidthcropfactorLabel.Text = 'Template width crop factor';

            % Create TemplatecropwidthEditField
            app.TemplatecropwidthEditField = uieditfield(app.TemplategenerateionGrid, 'numeric');
            app.TemplatecropwidthEditField.Limits = [0 1];
            app.TemplatecropwidthEditField.ValueChangedFcn = createCallbackFcn(app, @TemplatecropwidthEditFieldValueChanged, true);
            app.TemplatecropwidthEditField.Layout.Row = 5;
            app.TemplatecropwidthEditField.Layout.Column = 2;
            app.TemplatecropwidthEditField.Value = 1;

            % Create AdvancedTab
            app.AdvancedTab = uitab(app.ControlTabs);
            app.AdvancedTab.Title = 'Advanced';

            % Create AdvancedGrid
            app.AdvancedGrid = uigridlayout(app.AdvancedTab);
            app.AdvancedGrid.RowHeight = {'1x', '1x', '1x'};
            app.AdvancedGrid.ColumnSpacing = 5;
            app.AdvancedGrid.RowSpacing = 5;
            app.AdvancedGrid.Padding = [3 3 3 3];

            % Create TimelineGrid
            app.TimelineGrid = uigridlayout(app.AdvancedGrid);
            app.TimelineGrid.ColumnWidth = {'1x'};
            app.TimelineGrid.RowHeight = {20, '1x', '1x', '1x'};
            app.TimelineGrid.ColumnSpacing = 2;
            app.TimelineGrid.RowSpacing = 2;
            app.TimelineGrid.Padding = [0 0 0 0];
            app.TimelineGrid.Layout.Row = 1;
            app.TimelineGrid.Layout.Column = 1;

            % Create ManualartifactremoverButton
            app.ManualartifactremoverButton = uibutton(app.TimelineGrid, 'state');
            app.ManualartifactremoverButton.ValueChangedFcn = createCallbackFcn(app, @ManualartifactremoverButtonValueChanged, true);
            app.ManualartifactremoverButton.Text = 'Manual artifact remover';
            app.ManualartifactremoverButton.Layout.Row = 2;
            app.ManualartifactremoverButton.Layout.Column = 1;

            % Create ImporteventmarkerdataButton
            app.ImporteventmarkerdataButton = uibutton(app.TimelineGrid, 'push');
            app.ImporteventmarkerdataButton.ButtonPushedFcn = createCallbackFcn(app, @ImporteventmarkerdataButtonPushed, true);
            app.ImporteventmarkerdataButton.Layout.Row = 3;
            app.ImporteventmarkerdataButton.Layout.Column = 1;
            app.ImporteventmarkerdataButton.Text = 'Import event marker data';

            % Create VieweventmarkersButton
            app.VieweventmarkersButton = uibutton(app.TimelineGrid, 'state');
            app.VieweventmarkersButton.ValueChangedFcn = createCallbackFcn(app, @VieweventmarkersButtonValueChanged, true);
            app.VieweventmarkersButton.Enable = 'off';
            app.VieweventmarkersButton.Text = 'View event markers';
            app.VieweventmarkersButton.BackgroundColor = [0 1 1];
            app.VieweventmarkersButton.Layout.Row = 4;
            app.VieweventmarkersButton.Layout.Column = 1;

            % Create TimelineLabel
            app.TimelineLabel = uilabel(app.TimelineGrid);
            app.TimelineLabel.HorizontalAlignment = 'center';
            app.TimelineLabel.FontWeight = 'bold';
            app.TimelineLabel.Layout.Row = 1;
            app.TimelineLabel.Layout.Column = 1;
            app.TimelineLabel.Text = 'Timeline';

            % Create UnitGrid
            app.UnitGrid = uigridlayout(app.AdvancedGrid);
            app.UnitGrid.RowHeight = {20, '1x', '1x'};
            app.UnitGrid.ColumnSpacing = 5;
            app.UnitGrid.RowSpacing = 5;
            app.UnitGrid.Padding = [3 3 3 3];
            app.UnitGrid.Layout.Row = 1;
            app.UnitGrid.Layout.Column = 2;

            % Create SpikeWidthLabel
            app.SpikeWidthLabel = uilabel(app.UnitGrid);
            app.SpikeWidthLabel.HorizontalAlignment = 'right';
            app.SpikeWidthLabel.Layout.Row = 2;
            app.SpikeWidthLabel.Layout.Column = 1;
            app.SpikeWidthLabel.Text = 'Spike Width';

            % Create SpikewidthEditField
            app.SpikewidthEditField = uieditfield(app.UnitGrid, 'numeric');
            app.SpikewidthEditField.Limits = [1 Inf];
            app.SpikewidthEditField.ValueChangedFcn = createCallbackFcn(app, @SpikewidthEditFieldValueChanged, true);
            app.SpikewidthEditField.Layout.Row = 2;
            app.SpikewidthEditField.Layout.Column = 2;
            app.SpikewidthEditField.Value = 40;

            % Create OtherLabel
            app.OtherLabel = uilabel(app.UnitGrid);
            app.OtherLabel.HorizontalAlignment = 'center';
            app.OtherLabel.FontWeight = 'bold';
            app.OtherLabel.Layout.Row = 1;
            app.OtherLabel.Layout.Column = [1 2];
            app.OtherLabel.Text = 'Other';

            % Create FeatureviewtypeLabel
            app.FeatureviewtypeLabel = uilabel(app.UnitGrid);
            app.FeatureviewtypeLabel.HorizontalAlignment = 'right';
            app.FeatureviewtypeLabel.WordWrap = 'on';
            app.FeatureviewtypeLabel.Layout.Row = 3;
            app.FeatureviewtypeLabel.Layout.Column = 1;
            app.FeatureviewtypeLabel.Text = 'Feature view type';

            % Create FeatureviewtypeDropDown
            app.FeatureviewtypeDropDown = uidropdown(app.UnitGrid);
            app.FeatureviewtypeDropDown.Items = {'PCA', 'LDA'};
            app.FeatureviewtypeDropDown.Layout.Row = 3;
            app.FeatureviewtypeDropDown.Layout.Column = 2;
            app.FeatureviewtypeDropDown.Value = 'PCA';

            % Create TaggingGrid
            app.TaggingGrid = uigridlayout(app.AdvancedGrid);
            app.TaggingGrid.ColumnWidth = {'1x'};
            app.TaggingGrid.RowHeight = {20, '1x', '1x', '1x'};
            app.TaggingGrid.ColumnSpacing = 5;
            app.TaggingGrid.RowSpacing = 5;
            app.TaggingGrid.Padding = [3 3 3 3];
            app.TaggingGrid.Layout.Row = 3;
            app.TaggingGrid.Layout.Column = 2;

            % Create TagLabel
            app.TagLabel = uilabel(app.TaggingGrid);
            app.TagLabel.HorizontalAlignment = 'center';
            app.TagLabel.FontWeight = 'bold';
            app.TagLabel.Layout.Row = 1;
            app.TagLabel.Layout.Column = 1;
            app.TagLabel.Text = 'Tagging';

            % Create ToggletagButton
            app.ToggletagButton = uibutton(app.TaggingGrid, 'push');
            app.ToggletagButton.ButtonPushedFcn = createCallbackFcn(app, @ToggletagButtonPushed, true);
            app.ToggletagButton.BackgroundColor = [0.7176 0.2745 1];
            app.ToggletagButton.Layout.Row = 2;
            app.ToggletagButton.Layout.Column = 1;
            app.ToggletagButton.Text = 'Toggle left unit as:';

            % Create TagDropDown
            app.TagDropDown = uidropdown(app.TaggingGrid);
            app.TagDropDown.Items = {'Junk'};
            app.TagDropDown.Layout.Row = 3;
            app.TagDropDown.Layout.Column = 1;
            app.TagDropDown.Value = 'Junk';

            % Create TagmanagementButton
            app.TagmanagementButton = uibutton(app.TaggingGrid, 'push');
            app.TagmanagementButton.ButtonPushedFcn = createCallbackFcn(app, @TagmanagementButtonPushed, true);
            app.TagmanagementButton.BackgroundColor = [0.7176 0.2745 1];
            app.TagmanagementButton.Layout.Row = 4;
            app.TagmanagementButton.Layout.Column = 1;
            app.TagmanagementButton.Text = 'Tag management';

            % Create TemplategenerationGrid
            app.TemplategenerationGrid = uigridlayout(app.AdvancedGrid);
            app.TemplategenerationGrid.ColumnWidth = {'1x'};
            app.TemplategenerationGrid.RowHeight = {20, '1x', '1x', '1x', '1x'};
            app.TemplategenerationGrid.ColumnSpacing = 5;
            app.TemplategenerationGrid.RowSpacing = 5;
            app.TemplategenerationGrid.Padding = [3 3 3 3];
            app.TemplategenerationGrid.Layout.Row = [2 3];
            app.TemplategenerationGrid.Layout.Column = 1;

            % Create AdvTemplategenerationLabel
            app.AdvTemplategenerationLabel = uilabel(app.TemplategenerationGrid);
            app.AdvTemplategenerationLabel.HorizontalAlignment = 'center';
            app.AdvTemplategenerationLabel.FontWeight = 'bold';
            app.AdvTemplategenerationLabel.Layout.Row = 1;
            app.AdvTemplategenerationLabel.Layout.Column = 1;
            app.AdvTemplategenerationLabel.Text = 'Template generation';

            % Create ShowtemplatesButton
            app.ShowtemplatesButton = uibutton(app.TemplategenerationGrid, 'push');
            app.ShowtemplatesButton.ButtonPushedFcn = createCallbackFcn(app, @ShowtemplatesButtonPushed, true);
            app.ShowtemplatesButton.BackgroundColor = [1 1 0];
            app.ShowtemplatesButton.Enable = 'off';
            app.ShowtemplatesButton.Layout.Row = 3;
            app.ShowtemplatesButton.Layout.Column = 1;
            app.ShowtemplatesButton.Text = 'Show imported templates';

            % Create ImporttemplatesButton
            app.ImporttemplatesButton = uibutton(app.TemplategenerationGrid, 'push');
            app.ImporttemplatesButton.ButtonPushedFcn = createCallbackFcn(app, @ImporttemplatesMenuSelected, true);
            app.ImporttemplatesButton.Layout.Row = 2;
            app.ImporttemplatesButton.Layout.Column = 1;
            app.ImporttemplatesButton.Text = 'Import templates';

            % Create ShowsampleweightsButton
            app.ShowsampleweightsButton = uibutton(app.TemplategenerationGrid, 'push');
            app.ShowsampleweightsButton.ButtonPushedFcn = createCallbackFcn(app, @ShowsampleweightsButtonPushed, true);
            app.ShowsampleweightsButton.WordWrap = 'on';
            app.ShowsampleweightsButton.BackgroundColor = [1 1 0];
            app.ShowsampleweightsButton.Enable = 'off';
            app.ShowsampleweightsButton.Layout.Row = 5;
            app.ShowsampleweightsButton.Layout.Column = 1;
            app.ShowsampleweightsButton.Text = 'Show imported spike sample weights';

            % Create ImportsampleweightsButton
            app.ImportsampleweightsButton = uibutton(app.TemplategenerationGrid, 'push');
            app.ImportsampleweightsButton.ButtonPushedFcn = createCallbackFcn(app, @ImportspikeshapeButtonPushed, true);
            app.ImportsampleweightsButton.WordWrap = 'on';
            app.ImportsampleweightsButton.Layout.Row = 4;
            app.ImportsampleweightsButton.Layout.Column = 1;
            app.ImportsampleweightsButton.Text = 'Import custom deviation weights';

            % Create MultichannelGrid
            app.MultichannelGrid = uigridlayout(app.AdvancedGrid);
            app.MultichannelGrid.RowHeight = {20, '1x', '1x'};
            app.MultichannelGrid.ColumnSpacing = 5;
            app.MultichannelGrid.RowSpacing = 5;
            app.MultichannelGrid.Padding = [3 3 3 3];
            app.MultichannelGrid.Layout.Row = 2;
            app.MultichannelGrid.Layout.Column = 2;

            % Create MultichannelLabel
            app.MultichannelLabel = uilabel(app.MultichannelGrid);
            app.MultichannelLabel.HorizontalAlignment = 'center';
            app.MultichannelLabel.FontWeight = 'bold';
            app.MultichannelLabel.Layout.Row = 1;
            app.MultichannelLabel.Layout.Column = [1 2];
            app.MultichannelLabel.Text = 'Multichannel';

            % Create MainchannelDropDownLabel
            app.MainchannelDropDownLabel = uilabel(app.MultichannelGrid);
            app.MainchannelDropDownLabel.HorizontalAlignment = 'right';
            app.MainchannelDropDownLabel.Layout.Row = 2;
            app.MainchannelDropDownLabel.Layout.Column = 1;
            app.MainchannelDropDownLabel.Text = 'Main channel';

            % Create MainchannelDropDown
            app.MainchannelDropDown = uidropdown(app.MultichannelGrid);
            app.MainchannelDropDown.Items = {'1', ''};
            app.MainchannelDropDown.ValueChangedFcn = createCallbackFcn(app, @MainchannelDropDownValueChanged, true);
            app.MainchannelDropDown.Layout.Row = 2;
            app.MainchannelDropDown.Layout.Column = 2;
            app.MainchannelDropDown.Value = '1';

            % Create ColourGrid
            app.ColourGrid = uigridlayout(app.MainGrid);
            app.ColourGrid.ColumnWidth = {'1x'};
            app.ColourGrid.RowHeight = {'1x'};
            app.ColourGrid.ColumnSpacing = 0;
            app.ColourGrid.RowSpacing = 0;
            app.ColourGrid.Padding = [0 0 0 0];
            app.ColourGrid.Layout.Row = 1;
            app.ColourGrid.Layout.Column = [6 9];

            % Create MetricGrid_1
            app.MetricGrid_1 = uigridlayout(app.MainGrid);
            app.MetricGrid_1.ColumnWidth = {'1x'};
            app.MetricGrid_1.RowHeight = {22, '1x', '0x'};
            app.MetricGrid_1.ColumnSpacing = 2;
            app.MetricGrid_1.RowSpacing = 2;
            app.MetricGrid_1.Padding = [0 0 0 0];
            app.MetricGrid_1.Layout.Row = 2;
            app.MetricGrid_1.Layout.Column = [1 3];

            % Create MetricPanel_1
            app.MetricPanel_1 = uipanel(app.MetricGrid_1);
            app.MetricPanel_1.BorderType = 'none';
            app.MetricPanel_1.Layout.Row = 2;
            app.MetricPanel_1.Layout.Column = 1;

            % Create MetricDropDown_1
            app.MetricDropDown_1 = uidropdown(app.MetricGrid_1);
            app.MetricDropDown_1.Items = {'None'};
            app.MetricDropDown_1.ValueChangedFcn = createCallbackFcn(app, @MetricDropDownValueChanged, true);
            app.MetricDropDown_1.FontWeight = 'bold';
            app.MetricDropDown_1.Layout.Row = 1;
            app.MetricDropDown_1.Layout.Column = 1;
            app.MetricDropDown_1.Value = 'None';

            % Create MetricControlGrid_1
            app.MetricControlGrid_1 = uigridlayout(app.MetricGrid_1);
            app.MetricControlGrid_1.ColumnWidth = {'1x'};
            app.MetricControlGrid_1.RowHeight = {'1x'};
            app.MetricControlGrid_1.ColumnSpacing = 2;
            app.MetricControlGrid_1.RowSpacing = 2;
            app.MetricControlGrid_1.Padding = [0 0 0 0];
            app.MetricControlGrid_1.Layout.Row = 3;
            app.MetricControlGrid_1.Layout.Column = 1;

            % Create GridLayout
            app.GridLayout = uigridlayout(app.MainGrid);
            app.GridLayout.ColumnWidth = {'1x'};
            app.GridLayout.RowHeight = {22, '1x'};
            app.GridLayout.ColumnSpacing = 2;
            app.GridLayout.RowSpacing = 2;
            app.GridLayout.Padding = [0 0 0 0];
            app.GridLayout.Layout.Row = 4;
            app.GridLayout.Layout.Column = [3 9];

            % Create GridLayout2
            app.GridLayout2 = uigridlayout(app.GridLayout);
            app.GridLayout2.ColumnWidth = {50, '1x'};
            app.GridLayout2.RowHeight = {'1x'};
            app.GridLayout2.ColumnSpacing = 2;
            app.GridLayout2.RowSpacing = 2;
            app.GridLayout2.Padding = [0 0 0 0];
            app.GridLayout2.Layout.Row = 1;
            app.GridLayout2.Layout.Column = 1;

            % Create TTitle
            app.TTitle = uieditfield(app.GridLayout2, 'text');
            app.TTitle.Editable = 'off';
            app.TTitle.HorizontalAlignment = 'center';
            app.TTitle.FontWeight = 'bold';
            app.TTitle.BackgroundColor = [0.8 0.8 0.8];
            app.TTitle.Layout.Row = 1;
            app.TTitle.Layout.Column = 2;
            app.TTitle.Value = 'Data Trace';

            % Create TMultiButton
            app.TMultiButton = uibutton(app.GridLayout2, 'push');
            app.TMultiButton.ButtonPushedFcn = createCallbackFcn(app, @TMultiButtonValueChanged, true);
            app.TMultiButton.Enable = 'off';
            app.TMultiButton.Layout.Row = 1;
            app.TMultiButton.Layout.Column = 1;
            app.TMultiButton.Text = 'Multi';

            % Create dataPanel
            app.dataPanel = uipanel(app.GridLayout);
            app.dataPanel.BorderType = 'none';
            app.dataPanel.Layout.Row = 2;
            app.dataPanel.Layout.Column = 1;

            % Create MetricGrid_2
            app.MetricGrid_2 = uigridlayout(app.MainGrid);
            app.MetricGrid_2.ColumnWidth = {'1x'};
            app.MetricGrid_2.RowHeight = {22, '1x', 0};
            app.MetricGrid_2.ColumnSpacing = 2;
            app.MetricGrid_2.RowSpacing = 2;
            app.MetricGrid_2.Padding = [0 0 0 0];
            app.MetricGrid_2.Layout.Row = 3;
            app.MetricGrid_2.Layout.Column = [1 3];

            % Create MetricPanel_2
            app.MetricPanel_2 = uipanel(app.MetricGrid_2);
            app.MetricPanel_2.BorderType = 'none';
            app.MetricPanel_2.Layout.Row = 2;
            app.MetricPanel_2.Layout.Column = 1;

            % Create MetricControlGrid_2
            app.MetricControlGrid_2 = uigridlayout(app.MetricGrid_2);
            app.MetricControlGrid_2.ColumnWidth = {'1x'};
            app.MetricControlGrid_2.RowHeight = {'1x'};
            app.MetricControlGrid_2.ColumnSpacing = 2;
            app.MetricControlGrid_2.RowSpacing = 2;
            app.MetricControlGrid_2.Padding = [0 0 0 0];
            app.MetricControlGrid_2.Layout.Row = 3;
            app.MetricControlGrid_2.Layout.Column = 1;

            % Create MetricDropDown_2
            app.MetricDropDown_2 = uidropdown(app.MetricGrid_2);
            app.MetricDropDown_2.Items = {'None', 'ISI', 'Waveforms'};
            app.MetricDropDown_2.ValueChangedFcn = createCallbackFcn(app, @MetricDropDownValueChanged, true);
            app.MetricDropDown_2.FontWeight = 'bold';
            app.MetricDropDown_2.Layout.Row = 1;
            app.MetricDropDown_2.Layout.Column = 1;
            app.MetricDropDown_2.Value = 'None';

            % Create MetricGrid_3
            app.MetricGrid_3 = uigridlayout(app.MainGrid);
            app.MetricGrid_3.ColumnWidth = {'1x'};
            app.MetricGrid_3.RowHeight = {22, '1x', 0};
            app.MetricGrid_3.ColumnSpacing = 2;
            app.MetricGrid_3.RowSpacing = 2;
            app.MetricGrid_3.Padding = [0 0 0 0];
            app.MetricGrid_3.Layout.Row = 3;
            app.MetricGrid_3.Layout.Column = [4 6];

            % Create MetricPanel_3
            app.MetricPanel_3 = uipanel(app.MetricGrid_3);
            app.MetricPanel_3.BorderType = 'none';
            app.MetricPanel_3.Layout.Row = 2;
            app.MetricPanel_3.Layout.Column = 1;

            % Create MetricDropDown_3
            app.MetricDropDown_3 = uidropdown(app.MetricGrid_3);
            app.MetricDropDown_3.Items = {'None', 'ISI', 'Waveforms'};
            app.MetricDropDown_3.ValueChangedFcn = createCallbackFcn(app, @MetricDropDownValueChanged, true);
            app.MetricDropDown_3.FontWeight = 'bold';
            app.MetricDropDown_3.Layout.Row = 1;
            app.MetricDropDown_3.Layout.Column = 1;
            app.MetricDropDown_3.Value = 'None';

            % Create MetricControlGrid_3
            app.MetricControlGrid_3 = uigridlayout(app.MetricGrid_3);
            app.MetricControlGrid_3.ColumnWidth = {'1x'};
            app.MetricControlGrid_3.RowHeight = {'1x'};
            app.MetricControlGrid_3.ColumnSpacing = 2;
            app.MetricControlGrid_3.RowSpacing = 2;
            app.MetricControlGrid_3.Padding = [0 0 0 0];
            app.MetricControlGrid_3.Layout.Row = 3;
            app.MetricControlGrid_3.Layout.Column = 1;

            % Create MetricGrid_4
            app.MetricGrid_4 = uigridlayout(app.MainGrid);
            app.MetricGrid_4.ColumnWidth = {'1x'};
            app.MetricGrid_4.RowHeight = {22, '1x', 0};
            app.MetricGrid_4.ColumnSpacing = 2;
            app.MetricGrid_4.RowSpacing = 2;
            app.MetricGrid_4.Padding = [0 0 0 0];
            app.MetricGrid_4.Layout.Row = 3;
            app.MetricGrid_4.Layout.Column = [7 9];

            % Create MetricPanel_4
            app.MetricPanel_4 = uipanel(app.MetricGrid_4);
            app.MetricPanel_4.BorderType = 'none';
            app.MetricPanel_4.Layout.Row = 2;
            app.MetricPanel_4.Layout.Column = 1;

            % Create MetricDropDown_4
            app.MetricDropDown_4 = uidropdown(app.MetricGrid_4);
            app.MetricDropDown_4.Items = {'None', 'ISI', 'Waveforms'};
            app.MetricDropDown_4.ValueChangedFcn = createCallbackFcn(app, @MetricDropDownValueChanged, true);
            app.MetricDropDown_4.FontWeight = 'bold';
            app.MetricDropDown_4.Layout.Row = 1;
            app.MetricDropDown_4.Layout.Column = 1;
            app.MetricDropDown_4.Value = 'None';

            % Create MetricControlGrid_4
            app.MetricControlGrid_4 = uigridlayout(app.MetricGrid_4);
            app.MetricControlGrid_4.ColumnWidth = {'1x'};
            app.MetricControlGrid_4.RowHeight = {'1x'};
            app.MetricControlGrid_4.ColumnSpacing = 2;
            app.MetricControlGrid_4.RowSpacing = 2;
            app.MetricControlGrid_4.Padding = [0 0 0 0];
            app.MetricControlGrid_4.Layout.Row = 3;
            app.MetricControlGrid_4.Layout.Column = 1;

            % Show the figure after all components are created
            app.UIBase.Visible = 'on';
        end
    end

    % App creation and deletion
    methods (Access = public)

        % Construct app
        function app = spikesortGUI

            runningApp = getRunningApp(app);

            % Check for running singleton app
            if isempty(runningApp)

                % Create UIFigure and components
                createComponents(app)

                % Register the app with App Designer
                registerApp(app, app.UIBase)

                % Execute the startup function
                runStartupFcn(app, @startupFcn)
            else

                % Focus the running singleton app
                figure(runningApp.UIBase)

                app = runningApp;
            end

            if nargout == 0
                clear app
            end
        end

        % Code that executes before app deletion
        function delete(app)

            % Delete UIFigure when app is deleted
            delete(app.UIBase)
        end
    end
end]]></w:t></w:r></w:p></w:body></w:document>